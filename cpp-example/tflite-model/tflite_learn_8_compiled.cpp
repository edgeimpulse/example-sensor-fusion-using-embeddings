/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 13.11.2023 14:11:20

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1984;
#else
constexpr int kTensorArenaSize = 960;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[4];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,623 } };
const TfArray<1, float> quant0_scale = { 1, { 0.25717836618423462, } };
const TfArray<1, int> quant0_zero = { 1, { -104 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { -23, 36, -111, 66, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const TfArray<1, float> quant1_scale = { 1, { 0.00051150535000488162, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(16) int8_t tensor_data2[4*8] = { 
  69, 91, 111, -63, 5, -102, -112, -35, 
  73, -39, -92, -127, -86, -98, -2, 24, 
  -100, 91, -70, -101, 78, -89, 119, 70, 
  -2, -22, -5, 72, 39, -57, 86, -25, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 4,8 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0059054167941212654, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[8] = { 134, -77, -85, 0, -58, -57, -52, -28, };
const TfArray<1, int> tensor_dimension3 = { 1, { 8 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00052792159840464592, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[8*16] = { 
  39, 70, 52, -86, 97, 87, 77, 75, -26, 40, -6, -22, -6, 127, 41, 71, 
  -54, 52, 87, -71, -4, 52, 84, 83, -9, -81, -89, 68, -30, 74, 54, 56, 
  -22, -87, 46, -75, -48, -53, 8, 32, -1, 17, -39, -49, 5, 44, 48, -36, 
  56, -116, -75, 69, 41, -62, -46, 97, 96, 64, -27, 18, -94, -31, 51, -74, 
  -43, -99, -72, 46, -75, -91, -57, 109, -111, -39, -88, -11, 15, 84, 46, -27, 
  -84, 6, 65, -22, 52, -36, 67, -50, -26, -113, -112, 70, -57, -64, 101, -56, 
  88, 63, -3, 21, 115, 71, 67, -34, -96, -15, -25, 53, 31, 11, 23, -68, 
  -14, 76, 84, 60, 40, -22, -105, -56, -92, 71, 109, -51, 90, -65, 54, 59, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 8,16 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0044585498981177807, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[16] = { 0, 24, -25, -19, -14, -34, -25, 0, 12, 11, 0, -23, -4, 14, -23, 31, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0012226211838424206, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[16*623] = { 
  0, 0, -19, 12, -13, 6, 16, -17, -2, -5, 7, 7, 10, 1, 4, -18, 5, 11, 3, 11, 5, -16, -7, 20, -5, 17, -17, 11, 18, -3, -18, 8, -6, 14, 14, -14, -14, -5, 11, -13, 12, 16, 18, -17, -10, -12, 6, -13, -13, 12, 9, 0, 3, -18, -7, -17, -2, -8, -7, 12, -13, -2, 20, -19, 15, 8, -4, 4, 10, 19, 19, -3, 6, -2, 12, 8, -13, -15, 17, 18, -3, -14, 5, 17, 20, 17, 0, 14, -9, 5, -12, -10, 13, -6, 9, 14, -9, 15, -11, -8, 6, 4, 9, -16, -14, -4, -1, 15, -1, -14, -15, 19, 12, 0, 1, -10, 19, 3, 15, 1, 19, 2, 2, 9, -16, -1, -3, 12, -9, -6, -5, 18, -17, -5, -5, -11, -3, 3, -9, -1, 1, 14, -10, 16, -2, -9, -6, -7, 17, -3, 9, 10, -2, 1, -2, -20, 19, 8, 4, -16, 16, 18, 17, -18, -4, 18, -3, -1, -14, -5, 1, 14, -1, 5, 14, 10, 17, 4, 14, 2, -8, -10, -6, 8, 3, -12, -1, -20, 18, 9, -5, 14, 6, -10, 20, 15, 9, 11, 11, -15, 7, -18, -6, 3, -5, -7, 15, -20, -17, -7, 12, -5, -11, 17, -19, -5, 9, 7, 17, 3, 11, 9, 4, -20, 6, 2, 14, -5, -14, 6, 1, 18, -15, -15, -13, 11, -20, -15, 10, -8, 3, -14, 12, -16, 15, -13, 5, 6, -18, -12, -7, -12, 10, -7, -18, 6, 17, -18, 3, -3, 7, -13, -2, 19, 10, -4, 12, 12, 16, 5, -6, 17, -10, -19, 10, 7, -18, 19, 3, -5, 17, -2, 18, -13, 16, -19, -13, 10, 7, -6, -9, 15, 11, 6, -13, 17, 19, 2, 10, -9, -8, -11, 11, 18, -16, 15, -13, 5, 1, -4, -9, 9, 12, 5, -19, -3, -18, 15, -12, 20, -1, 9, 20, 17, 3, 2, 12, 15, -3, 13, -2, 0, -15, -10, 17, 15, -18, -20, 19, -11, -3, -10, -20, 13, -2, -17, -16, -2, -19, 8, 18, -16, -5, -7, -3, -12, 5, -1, 3, 5, -7, 1, -20, 9, 5, 3, 2, 1, 2, -6, -3, -15, -5, -17, -20, 1, 19, 16, 5, 8, 10, 5, -7, -20, 12, 7, -17, 16, -10, -17, -3, 6, 8, -16, 14, -2, -6, -5, -9, -20, 7, 17, -13, 16, 7, 4, 13, 16, -16, -3, -1, -10, 0, 6, 16, -18, -6, 4, -20, -18, -3, 14, 19, -19, 17, -17, 12, -11, -14, -13, -8, -7, 3, -10, -13, 5, 11, 8, 8, -20, -15, -9, 5, 14, -9, -2, 18, -3, -12, -13, -4, -3, -20, -12, -10, 8, -6, 11, 18, -10, -9, -10, -10, -20, -6, 10, 19, 6, -8, 1, -19, 19, -1, -17, -14, 9, 4, 16, 20, 3, 16, 17, -2, 16, 0, 12, -10, 11, 9, -15, -15, -19, 20, -8, 4, -4, 3, 0, 1, -3, -5, -4, 8, -4, 10, 2, 7, 16, 18, 11, 0, -11, 12, 3, 1, 3, 12, 9, 0, 0, 20, 18, 3, 8, 1, 13, 6, -8, -9, 16, 16, -19, 20, -15, 14, -14, 17, 8, 15, -1, 18, 6, 19, 18, 11, 18, 12, 9, -17, 19, -11, -10, -19, -4, -20, -16, -13, 11, -2, -12, -13, -13, 20, -18, -10, 8, -7, 14, -6, 20, -15, -3, -18, -4, 3, -15, -1, -1, 0, -14, 15, -5, 20, 14, -8, -17, 14, 6, -7, -13, 11, 13, 19, 15, -7, -12, 7, -5, -4, -6, 19, -5, -11, 5, -10, 13, -11, 13, -2, -18, -6, 12, -8, 2, -19, 17, -12, 7, -1, -4, -13, 0, 5, 
  -15, -10, 0, -21, -10, -13, 8, 13, -25, 14, 3, 0, -1, -23, -12, -3, -13, 1, -16, -5, 12, -19, -7, 10, -4, -12, 2, -30, -14, -24, 1, -17, -24, -5, -9, -11, -6, -4, -13, -7, 13, -4, -24, 10, -22, -19, 15, -5, -8, 10, -16, -30, -2, -19, -13, 5, 1, -15, 7, -19, -5, -23, 5, 3, -11, -7, 11, -18, -20, 19, -20, 30, 9, -31, -6, -9, 1, -12, -18, -19, -9, -7, 13, -22, 13, 8, 7, 20, -15, -11, 10, 12, -7, -6, -18, -12, -26, -21, -26, -3, -5, -18, 6, -21, 13, 6, 7, 1, -17, -5, 0, 0, -24, 12, -3, 13, -24, 5, -5, -11, -21, -4, 9, -24, 5, -2, 11, 11, -24, -19, -21, -19, 1, -28, -21, -11, -2, 1, 12, -8, 52, 8, -9, 9, -3, -1, 8, -17, 8, -19, 0, -18, -12, -14, -2, 6, -3, -1, 11, -12, -21, 14, 12, -18, -1, 1, -29, -12, -25, 10, -17, 13, -13, -2, 15, -23, -24, -7, 4, -16, -3, 6, 10, 14, 15, -11, 13, 14, -24, 0, -15, -24, -20, 13, -6, 8, -10, -8, -23, -8, -18, -22, 7, 2, -23, -23, 10, 5, 4, 0, -35, 26, 4, -4, 28, 18, 25, 16, -8, 11, 15, 10, 21, 18, 11, -5, 6, -4, 21, -22, 7, -8, 19, 30, 2, 18, 9, 21, 8, 26, 21, 10, -6, 10, -3, -20, 21, 8, -6, 12, 28, 8, 5, -4, 16, -5, 20, 16, -10, 2, 20, 2, 24, 11, 6, 10, 11, -4, 8, -10, 10, -3, 3, 23, -37, -13, 6, 13, -5, 1, 20, -4, 21, 8, -2, 1, -18, 25, 0, 25, -3, 17, 11, -21, 18, 9, 15, -7, 8, 0, -21, 28, -9, 13, 13, 7, -28, 26, 6, -6, 21, 25, 33, 4, 10, 9, -14, 21, 14, -17, 6, -7, -41, 30, 10, -34, 33, 26, 25, 2, 27, 4, 3, 4, 25, 20, 0, -7, -32, -5, 23, 0, 18, 14, 23, 24, 31, -2, 21, -3, -8, -1, 28, 9, -15, 17, -2, -2, 0, -8, 31, 17, 9, 10, 7, 0, -13, 20, 4, 27, -21, 7, 18, -21, -1, 26, 18, 27, 25, 8, 6, -1, -4, -12, 2, -7, -20, 21, 10, 7, 32, 18, 26, 10, 31, 22, -13, -6, -8, 9, 2, -5, -34, 4, 28, 3, 21, 5, 18, -4, 28, 24, 10, -3, 2, -1, 9, -8, -20, 19, 3, -5, 15, 15, -6, 27, 29, 8, -1, -11, 11, -12, 12, 21, -31, -3, 13, -25, 11, 17, 28, 31, 12, 12, -9, -1, 2, -3, 15, 27, -42, -8, -9, -10, 0, 1, 29, -7, 32, 5, -15, 6, -8, -9, 33, 22, -43, -3, 10, -27, -6, 9, 30, 29, 13, -11, -3, 18, -13, -1, 21, 28, -25, 0, 10, -25, 5, 10, 18, 15, 6, 0, 12, 15, 21, 21, 18, -6, -28, 26, 16, -4, 14, 22, 14, 12, 1, -2, 13, 3, -1, -5, 28, 8, -44, -4, 17, -3, 28, 23, 11, -9, 21, -9, 18, 1, 19, -18, -4, 2, -22, 19, 27, -14, 17, 9, 18, -6, 22, -9, -6, 5, -10, -3, -7, 16, -45, -1, 25, -5, 26, -7, -7, 1, 0, 16, -4, -13, 19, 5, 12, 5, -40, -2, 3, -1, 26, 9, 27, 2, 10, -1, -14, 2, 12, 9, 10, 22, -15, 7, 11, -2, 35, -5, 12, 19, -3, -4, 14, 25, 0, 15, -4, 13, -43, 21, 14, -2, 27, 17, 23, -7, 8, 20, 10, 17, -4, 23, 9, 6, -11, 6, 8, 10, 23, 18, 17, 20, 1, 12, 14, 28, 20, 
  7, -11, -11, 3, -17, 15, 16, -6, 18, 21, 26, 6, 13, -9, 5, -8, -11, 26, 16, 3, 13, 8, 9, 13, 22, 26, -4, 13, -25, 7, -4, -2, -6, -3, -10, -4, -12, 1, -13, -12, 17, -7, 19, 26, 18, -11, 12, 11, -10, 26, 17, -8, 23, 7, 7, 14, 7, 19, 8, -5, 13, -10, -2, 0, 23, 3, 15, 3, 21, -9, -4, -7, -11, -2, -1, 25, 0, 15, 19, -6, 1, 16, 24, -12, 19, 0, 7, 17, 22, 24, 8, 22, -2, 6, 18, -11, 24, -1, 15, -3, 15, 12, 8, 12, 12, 8, 16, -10, -1, 11, -10, 5, 10, 6, 19, 11, 19, 18, 3, -13, 13, 17, 22, -12, 4, -13, -14, 25, 16, 1, 15, -4, -1, 7, -7, 8, 7, -6, -11, 4, 8, -26, 4, -13, 2, 16, 15, -11, -1, -1, -4, 24, 4, -6, 6, 24, 12, -10, -8, 15, -11, 7, -7, 19, -13, 10, -6, 6, 12, 22, -4, 12, 16, 25, 26, 3, 21, 14, -3, -14, -10, 23, 20, 4, -11, -1, 3, 21, 6, 23, 0, 23, 19, -5, -12, 18, 16, 18, 3, -4, 8, 12, 18, 22, -8, 5, 0, -17, 5, 17, -14, 5, -4, 7, 21, 7, 25, -4, 21, -23, 6, -19, 6, 0, 1, 18, 3, -14, 15, -5, -5, 10, 12, -11, -11, 3, -9, 0, -20, -19, -7, 0, 11, 1, 1, -2, -2, -3, -13, 6, 25, 7, -27, 1, -17, -23, 3, 18, -1, 2, -13, -11, 14, -6, 15, -1, 22, -11, -2, -16, -24, 9, -19, 6, 0, -2, -5, 13, -1, -10, -6, 2, 25, 11, 14, -20, -8, -11, -7, 6, -14, 13, 4, -25, 19, 6, -4, 24, 8, -23, -20, -3, 5, -18, -14, 11, -14, -16, -7, 11, 24, -6, 4, 14, -1, 11, 7, -2, -12, -18, -11, 26, -13, -13, 11, 2, -4, -24, 6, 24, -3, -25, -3, -11, -18, 1, -9, 18, 9, -13, 20, -13, 25, 4, 9, 1, -11, -19, 10, 9, 6, 14, -2, -5, -24, -12, -11, 4, 6, -25, 18, 12, -3, -23, -8, 13, -10, -23, -18, 0, 9, 0, -1, 3, 22, 9, -2, 16, 5, -25, -8, -3, -17, 7, 6, 18, -5, -4, 21, 6, -6, -6, 4, 15, 12, 13, -12, 14, -4, -26, 7, 7, 12, -13, 26, 8, 14, 6, -10, -8, -6, 12, 4, -26, -15, -2, 7, -2, -13, -20, -7, 8, 4, 4, -10, 24, -1, 1, -21, -1, 10, -24, -1, 20, 4, 11, -12, -11, -1, 0, 22, -8, -2, 13, -3, -17, 13, 14, 7, 19, -21, -1, 23, -25, 14, -16, -5, -4, -9, -3, -13, -1, 3, -7, 3, -18, -15, -15, 10, -14, -11, -13, 2, 1, 14, -3, 12, -4, 6, -21, -10, 8, -20, -14, 11, -13, 16, -10, 7, 17, -7, -13, 5, -17, 3, 11, 17, 4, 0, 16, 18, -10, 22, -4, -13, 25, 25, 17, -6, 13, -11, 12, -8, -14, 7, -20, -2, 1, 22, 3, -4, 2, 26, 10, -27, 11, -6, -12, -20, -6, -4, -3, 13, -13, 4, 2, 19, 24, 16, 3, -7, -23, -7, 3, -4, 4, -8, -17, 5, -7, -9, -16, -4, -13, -11, -12, 3, -1, 12, 6, -7, -14, -9, -5, 16, -10, 12, 7, -7, -5, 7, 1, -12, -1, -18, 5, -7, 3, 1, -15, 0, 9, 20, 6, 5, 23, 3, 5, -1, -6, -24, -16, 2, 23, 0, -6, 3, 12, 20, 13, -4, 8, 19, -16, 3, -8, -9, -12, 17, 20, 0, -10, 10, 9, 13, 7, -2, 20, 1, 16, 8, -16, 7, 
  -23, 47, -12, 10, 10, -1, -1, 4, 20, 9, 10, 14, 6, 17, 16, 9, 9, 1, -14, -26, -24, -11, -1, 7, 8, -24, -14, 10, 15, -11, -4, -11, -8, 3, -6, 8, -2, -21, -17, 7, 4, 3, -6, -8, -35, 5, -33, -30, -4, -15, -25, -23, -19, 9, 13, 10, -11, -25, -7, -26, 5, -7, 10, -20, -10, -8, -22, 13, 14, -22, 16, -22, 1, -4, -22, 21, -15, -11, -1, -17, -16, -25, 1, 5, -13, -21, -32, 2, -26, -9, -20, -16, 2, 4, -7, -15, -21, 1, 0, 3, -3, 11, -21, -28, -15, -17, -16, 2, -25, -2, 5, -2, 9, 2, -27, -24, -24, 4, -5, -18, -20, -23, 3, -12, 9, -15, -14, 12, 11, -23, -12, -7, -17, 1, -20, 1, -4, -14, -10, 13, -33, -20, 4, -17, -7, -18, -3, -22, 12, 7, -19, 20, -2, -2, -26, -28, -4, -11, -14, -24, 0, -16, -23, -12, -2, -6, 20, 20, -19, 8, -19, 7, -10, -14, -7, 8, 4, 2, -7, 10, -3, -4, 2, -3, -21, -12, -8, -21, 6, -21, 3, -15, 8, -8, 1, 3, -20, 11, -5, -10, -10, -19, 15, -1, -7, -15, 1, -14, -18, 6, 13, 23, -3, 2, -24, -19, -15, -18, 3, 1, 6, -23, -10, -14, -10, -10, -1, 3, -1, -19, -36, -30, -19, -10, -8, -7, -6, -38, -3, -26, -35, 15, -6, 16, 37, -22, -42, -42, -39, 34, -28, -14, 28, -8, 28, -20, 9, -7, -3, 9, 12, -12, -32, -20, -23, -2, -27, -6, 17, -5, 4, -19, 19, -7, 11, 32, -16, -27, -21, 0, 6, 2, -10, -4, 9, -21, 0, -14, 19, -19, -1, 3, -28, -1, -13, -22, -28, -23, -18, 0, 14, 4, 30, -26, -12, -24, -8, 16, -1, -4, -27, -7, -10, 26, -2, -29, -10, 5, -3, -31, 39, 14, 28, 31, 36, -16, -22, -18, -9, 3, -25, 11, -10, -12, 18, -14, 3, -4, 1, 15, -7, 15, -32, -28, -41, 4, -30, -18, 31, -38, 35, -26, -11, 7, 10, 32, -8, -10, -35, -25, -30, -5, -33, -22, 32, -33, 13, -27, -18, -3, 22, 2, -27, -4, -17, -26, -17, -7, -20, -22, 13, -34, 16, -18, 5, 13, 11, 34, -2, 8, -26, -39, -20, -30, -50, -4, 19, -28, 11, -7, -20, -7, 24, 24, -22, -4, -27, -4, 3, -24, -35, -35, 20, -25, 7, -8, 23, 3, 16, 25, 8, -19, -19, 1, -4, 8, -15, -3, 1, -1, 18, 4, 45, -14, 7, -3, -21, -17, -15, -29, -28, -24, -33, -11, 6, -18, 26, -21, -42, -9, 18, 9, -22, 8, -40, -15, -11, -30, -34, -7, 5, -32, 24, -8, -44, -7, 21, 18, -6, -19, -9, -5, -13, 2, -40, -36, 6, 9, 11, -32, 70, 0, 12, 14, 11, -14, 10, -15, -32, 10, -13, -7, 8, 9, 3, -1, 69, 10, 18, 0, 2, -1, -10, -24, -17, -20, -36, 16, 14, -41, 35, -31, -41, -17, 29, 25, -2, -6, -28, -14, -19, -9, -47, -4, 6, -16, 13, -3, 4, -14, 32, 22, -23, -7, -4, -28, -30, -21, -6, -2, 15, -35, 21, -17, -24, -18, 10, 0, 0, 2, -29, -33, -28, -25, -44, -4, 13, -28, 30, -15, -9, -3, 21, 24, -12, 16, -21, -37, -11, -14, -46, -1, 10, -2, 7, -17, -13, 15, 40, 17, -12, -15, -35, -14, -40, -8, -9, -33, 20, -30, 5, -4, -25, 8, 46, 28, 4, -19, -45, -11, -37, -31, -14, -29, 7, -15, 22, -4, -43, -41, 19, 34, -47, 11, -37, -6, -33, -29, -15, -29, -2, -8, 1, 
  44, -10, 20, -2, 5, -11, 15, 1, -7, -6, -4, -10, -12, 1, 18, -7, -7, 16, -1, -3, 18, 21, -4, 23, 11, 4, 1, -5, -6, 15, 0, 19, 0, 8, 5, -12, -11, 21, -2, -12, 25, -10, -5, 19, 1, 0, 21, -11, -10, 9, 9, 5, 3, -10, -1, 18, 23, -10, 25, 4, 2, -8, -2, 19, -14, -10, 1, -9, -8, 37, 43, 37, -9, -10, -3, -12, -3, 22, -10, -3, 6, -9, 15, 19, 20, -14, 3, 25, 6, 0, 20, 1, 24, 11, -12, -1, 15, 11, -11, 23, 21, 5, 24, 23, -3, 13, 9, 20, -12, 13, 20, -13, 1, -8, -12, 11, 23, 9, -8, 4, 10, 17, 0, 19, -5, 1, -15, 3, 15, 15, 24, -3, 20, 4, 8, -8, -4, -7, 22, 5, -6, 8, -25, -9, 23, -3, 11, 23, 23, 0, 23, 6, 3, 13, 0, -11, 3, 10, -14, 26, -3, 3, 24, 5, 22, 14, 11, 10, 12, 5, 16, 25, -8, 21, 23, 12, 5, 1, 22, -5, 19, 2, 12, -14, -8, -12, -5, 9, 10, 17, -2, 17, 14, 4, 17, 21, 10, 22, -2, 2, -2, 20, 12, -15, -11, -14, -4, 8, -5, 30, 18, 11, 29, 11, 21, 11, 16, 38, 31, 13, -14, 32, 9, 13, 20, 10, 1, -15, 16, -13, 31, 33, 15, 11, 18, 34, -6, 32, -8, 32, 9, 46, 14, -16, 33, -9, 41, 13, 13, 40, 12, 39, 5, 11, -12, 6, -4, 33, 4, -24, 13, 8, 13, 33, 11, 30, 14, 23, 12, 25, -10, 10, 4, 14, 44, -3, 36, -7, 27, 18, 12, 10, 22, 32, -25, 15, 14, 21, 5, 19, 2, -13, 10, -13, 18, 15, 26, 34, 5, 32, 14, 8, -23, 41, 14, 37, 11, -18, 38, 4, 43, 41, 29, 8, 12, 29, 2, 12, 3, 29, 28, 35, -5, -8, 38, -7, 47, 26, 46, 20, 38, 37, 5, 20, -22, 17, 47, 22, 17, -5, 27, -10, 29, 18, 35, 41, 39, 8, -5, 21, 12, 13, -19, 45, -17, 2, 26, 5, 19, 24, 38, 21, 44, 30, -4, 9, -16, 14, 40, 35, -23, -10, 45, 9, 46, 37, 36, 28, 32, 21, -6, 13, -3, 10, 18, 12, 1, -3, 26, -20, 19, 17, 10, 19, 24, 30, -18, 16, -12, 3, -21, 26, -14, -8, 29, -1, 8, 13, 40, 31, 44, 17, -25, 17, -6, 3, 4, 24, 5, -9, 16, 8, 28, 40, 14, 32, 8, 26, 14, 9, 13, 27, 25, 51, 11, 9, 17, -2, 34, 40, 3, 7, 40, 12, -1, 38, -16, 2, 46, 11, -19, -12, 17, 0, 31, 20, 21, 29, 22, 15, -5, 37, -9, 7, 10, 11, 12, -15, 22, 27, 19, 10, 18, 46, 2, 24, 8, 10, 9, 12, -5, 9, 5, -2, 23, -10, 12, 32, 12, 8, 43, 18, -12, 14, -10, 15, -2, 14, -14, 13, 52, 6, 29, 19, 16, 25, 7, 3, 3, 5, -23, 15, 50, 51, -8, 0, 33, -24, 18, 12, 35, 18, 5, 26, -10, 21, 8, 7, 24, 49, 13, -15, 10, 3, 35, 26, 33, 17, 31, 10, -15, 24, -25, 26, 25, 33, 17, -19, 15, 12, 23, 16, 42, 24, 28, 4, -10, 14, -15, 39, 41, 18, -9, -4, 21, -25, 4, 18, 24, 23, 27, 13, -2, 10, -4, 36, 44, 51, -18, -9, 15, -22, 32, 40, 15, 39, 20, 40, -15, 27, 0, 29, 10, 19, -8, -26, 22, 26, 22, 39, 29, 27, 6, 12, 2, 21, -2, 21, 7, 22, -9, -10, 40, 11, 15, 22, 23, 10, 14, 9, -23, 47, -8, 
  -7, -5, 9, -18, -6, 3, 13, 4, -7, 10, 2, 28, 7, 14, -4, -10, 13, 24, 5, 26, -9, 19, 14, -8, -4, -6, 7, 2, 8, 30, 24, 19, -7, -4, 15, 0, -5, -2, 15, 3, 25, 28, 14, 6, 14, 22, 6, -3, 24, 11, 21, -4, 1, 25, 13, 12, 3, -5, 8, 17, 8, 9, 19, 16, 28, 16, 2, 20, 28, 2, 8, 8, -23, 7, 15, 14, 23, -7, 6, 23, 3, 9, 19, 25, 2, 25, 1, 2, -8, 21, 22, 8, 27, 18, -6, 7, -2, -4, 19, 23, -7, -12, -10, 3, -3, 6, 10, 27, 23, -2, 28, 3, 17, 10, 16, -4, 13, -2, -11, 27, 6, -8, 2, 9, 0, 6, 28, 17, 14, 2, 14, 19, -11, 9, 0, 16, 6, -11, 8, -10, 8, -1, -4, -5, 22, 19, 13, 28, 19, 18, -12, -10, 27, -1, 26, 9, 6, 17, -8, 2, -1, 27, 26, -8, -3, -4, 4, 25, -8, 18, 17, 2, 21, -1, -12, 19, 11, -11, 19, 7, 11, 21, 8, 17, 6, 25, -4, 7, 0, -11, 14, 0, -6, 5, -9, 2, 27, 16, 21, 5, 20, -8, -9, 19, 17, 22, 2, 8, 4, -10, 9, -17, 10, 11, 6, -26, -17, 21, -15, -18, -25, -14, -5, -11, -13, 23, 5, 9, -5, 10, -14, 4, 0, -12, 4, 11, 12, -23, -11, -16, 2, 23, 18, -13, -11, 14, -22, 13, 3, 3, -11, -13, -17, -1, -12, -24, -5, -3, 6, -23, 9, 9, -16, -3, -11, -2, -11, -6, -21, -11, -19, 1, -12, -1, 1, -20, -11, -12, -1, -27, 6, 22, -10, -25, -15, -21, -23, -4, -9, 3, 8, 4, 14, -14, -8, -2, -10, 15, -9, -25, 7, 3, -23, -21, -7, 13, -4, -9, -10, -9, -15, 8, -15, 22, 0, 1, -2, -13, -27, -26, 6, 4, 4, -7, -7, -20, -16, 12, -19, -4, -11, -14, -17, -20, 11, 2, -22, -3, -6, -16, 21, 5, -26, 10, -25, 0, -9, 0, -14, 9, -21, -18, 6, -2, -1, -2, -2, 4, -1, 12, -10, -12, -11, -9, -18, -23, -2, -9, 13, -12, -16, -7, 1, 9, -26, -24, -8, 10, -24, -24, -15, -12, -2, -1, -22, -8, 8, -12, -14, 2, -8, -25, 0, -2, -17, -12, 12, -8, -16, -18, 6, 23, -16, -26, 7, 9, -8, -11, -13, 4, -7, -11, 4, -5, -17, 5, 11, 8, -15, 6, 3, -4, -7, 2, 0, 4, 8, 0, -10, -1, -22, 0, 18, 20, -2, 11, -13, -15, 9, -23, 1, 11, -15, -11, -13, -13, -26, -14, -14, 14, -3, -2, -1, -9, -19, 4, 12, -18, 10, 4, -14, -14, 11, 11, -23, -6, 5, 0, -2, 2, 13, -26, -16, 0, 13, -20, 6, -15, 9, -9, -12, 2, 10, 12, 18, 1, 9, -7, -27, 13, 4, -20, -23, -9, -12, 5, 21, 22, -7, 12, 24, -1, -20, -21, -4, -6, 7, -23, -13, 3, -1, -19, -12, -14, -13, -3, 25, 14, -7, -9, -17, -6, 5, 10, 11, 11, 7, 12, 5, -14, -15, -21, 1, -8, -13, -4, -19, 17, -10, -15, 6, -15, 4, -24, -7, -9, -4, -9, -5, 10, -9, -12, -22, -13, 11, -17, 1, 11, -8, 9, -3, 20, 8, 9, 20, -17, -25, 3, -10, 20, -15, 3, -8, 5, 2, -7, -5, 13, 6, -14, -8, -22, -6, -17, -8, -12, -24, -12, 2, -17, -14, 13, -16, -14, 3, -26, -7, 1, -24, -25, -21, 0, -20, -25, -26, 9, -5, -8, 12, -9, 0, 13, 4, -19, 6, 10, -18, 25, -1, 3, -25, -9, -5, 
  4, -9, 1, -17, -13, -6, -4, 8, -3, 10, -1, 5, -1, 26, 12, 7, 16, -8, -14, -5, -2, 18, -6, 18, 11, -3, -12, 23, -4, 22, -2, 1, -11, 3, 0, 23, -9, -8, 27, -10, 7, -8, -12, 3, 24, -12, 5, -7, 22, 12, 4, 17, 10, -13, 0, -4, 3, 3, -1, -13, 4, 1, -12, 2, -6, -11, 6, -5, -9, 12, -5, -4, -19, 11, 3, -6, -1, -4, -6, 20, 16, 18, -4, 24, 15, -9, 0, 24, 8, 9, 0, 23, -3, 24, 24, 16, 17, 10, 6, 26, 21, -5, 15, -7, -7, -5, 10, 10, 21, 12, -3, 6, -10, -3, 25, -2, -1, 0, -11, 7, -3, 16, 11, 23, 16, -6, -11, 26, -7, 15, 26, -2, 7, 19, -12, -5, 3, 18, -15, -6, 7, -22, -17, -12, 9, 18, 27, 15, 22, -5, -4, 23, -5, 4, -9, -1, 23, 26, 5, 11, 1, 5, 8, -1, -2, 5, 16, 5, 20, 12, -10, 21, 26, -11, 18, 14, 24, 0, 0, 12, -9, 7, 21, 14, -1, 22, 9, 1, 0, 17, 5, 8, 15, 17, -5, 10, 0, -2, 1, 7, 25, 21, -3, 7, 13, 19, -6, -24, 1, -12, 14, -9, 6, 6, -14, 6, -26, 8, -23, 10, -26, -16, -16, 0, 12, 8, -22, -14, -22, -23, -15, -4, -22, -3, 4, -21, -19, -4, -23, -26, 7, 10, -14, -12, 1, 6, -23, -15, 7, -10, -18, -7, -22, 10, -15, -8, -22, -16, -19, 4, -4, 11, -20, 0, -16, 10, -14, 25, -10, -6, -5, 8, 10, -26, -2, -4, -2, 9, -16, -22, -1, -5, 8, 3, -2, 14, -11, 0, 7, -21, 6, -3, -24, -17, 3, -6, -4, -5, -23, 10, -15, 24, -12, 24, -10, -23, -25, -3, -24, 3, 11, -13, -9, -5, -16, 8, -15, -11, -3, 22, 11, 10, -26, -23, -8, 13, -20, 6, 10, 6, 7, 20, 9, -15, -3, -6, 1, 6, 14, 9, -21, -9, -1, 14, -5, -15, -14, -21, 12, -9, 9, -17, -5, -21, 5, -19, -6, -23, -23, 8, -14, -26, 7, -21, -8, -11, 13, -4, -13, 8, 6, -16, -3, -26, -1, -19, 7, 11, 7, 14, -7, -4, -20, -10, -15, -19, -3, -6, -2, -16, -21, -4, 8, -27, -13, 1, 14, 10, -15, 1, -9, -23, 4, -25, 5, -3, 12, -17, -2, -6, -26, 15, -1, 7, -1, 12, -14, -10, 0, -3, 0, 0, 7, -13, 14, -6, 11, -14, -24, -26, 14, 23, 4, -13, 16, -3, 11, 3, 2, -1, 8, -24, 5, -24, -3, 3, 2, -6, -16, -4, -8, -13, 5, 16, 11, -11, 12, -21, -1, -13, 10, -6, 13, -9, -6, 3, -12, -7, -11, 17, -19, -17, -10, 12, 3, -12, -14, -15, 1, 17, 0, -21, 0, -18, -9, -15, 9, -7, -22, 6, -3, -1, 7, 18, 7, 17, 2, -13, -4, -4, -4, -25, -7, 6, -5, 10, -10, -22, -22, 14, -2, 16, -11, 20, -16, -12, 6, -20, 2, -15, -22, -4, 2, -7, -25, 4, -18, -14, -6, -11, -27, -13, -1, 9, -1, -15, 8, -17, -17, 0, -18, -23, -17, -2, -14, -21, -20, -1, 9, -2, -18, -6, -21, 4, 4, 18, 7, -1, 2, 14, -20, 10, -22, -11, 14, 6, 11, -12, -2, -13, 13, -2, 3, -10, -3, 21, 7, -16, -7, 7, -4, 16, -7, 16, -20, -16, -5, -17, 11, 4, -23, 5, -12, 9, 7, -19, 6, -14, 14, 24, -1, -22, 1, 11, 2, 19, 5, 10, -4, 3, -16, -25, 7, -14, 26, 13, 11, -13, 14, -8, -7, -16, -18, 
  15, 11, 15, -15, -6, 17, 12, -7, -2, -8, -6, -17, 14, -1, 19, -7, 12, 0, 10, 9, -7, -10, -17, 7, 1, 17, 8, -19, -17, 1, -5, 10, 1, -9, 10, -19, 13, 16, 5, -4, 4, -9, -13, -2, -5, -4, -19, 4, 5, 11, -4, 12, -14, 6, -3, 7, -16, -16, -18, 9, -12, 9, 1, 8, 14, -4, -20, 7, 8, 12, -17, -20, -17, -15, -16, -14, 7, 14, 4, -6, 11, -18, -2, 3, -5, -9, -18, -12, -17, 1, -4, -14, -3, 8, 6, -8, 20, -20, 17, 3, 20, 13, -1, 3, -11, 5, -16, 7, 2, 9, 13, -8, 0, -1, -16, 3, 2, -4, 19, 6, -7, -4, -14, 11, -5, -6, -2, 15, 19, 14, -3, -1, 13, 3, 20, 19, 6, 12, 6, 4, 3, 15, -13, 12, -13, 15, 1, -11, -1, 7, -7, 16, 3, -3, -4, 8, 1, 13, -12, -15, -4, 6, 0, -4, 12, -4, 18, 11, -13, 4, -4, 4, 16, 2, 11, -3, 13, -13, -8, 9, 7, 5, 16, 19, -8, 13, -15, 8, 10, -12, 2, 18, -7, 12, 7, -8, 20, -4, -10, -5, -3, 9, -20, -16, 10, -4, 5, -16, -18, -12, -19, 3, -13, -4, 1, -8, -18, -5, 11, 0, -11, 9, 1, -17, 17, -2, 14, -14, -13, 14, -15, -20, 7, -3, 8, 20, -11, 17, -17, -6, 12, -12, 10, 10, 16, 18, -14, -15, 6, -10, -10, -4, -20, -3, -14, -3, -1, -4, 9, -16, -8, 0, 6, -2, -2, -19, -4, 2, -5, -11, 19, -1, 11, 1, 15, -6, 6, 13, 2, -8, 4, -19, 16, 10, -10, -16, 4, -18, 2, -13, -20, 17, -2, -8, 0, 6, -2, 17, 9, -2, 11, 7, -16, -20, 8, 10, -6, -3, 2, 8, -19, -7, -13, -4, -11, -8, -19, 15, -20, -11, -7, 17, -5, -12, -2, -14, -13, 15, 9, -16, -18, -3, -15, 6, 5, 4, -12, -15, -11, -3, -10, -11, 6, 0, -1, -20, -7, 13, -11, 9, -1, 20, 7, -16, -5, 17, -12, 8, -13, -4, 13, -2, 18, 18, -2, -17, 14, 9, -20, -4, 5, -10, 9, -7, 9, -11, -5, -12, 17, 20, 16, 0, -9, 11, -7, 5, -8, -10, -15, 20, 16, 12, 10, -13, 13, 18, -11, -4, 17, 18, 15, -13, -5, -11, 8, -17, -11, 8, 6, 7, 4, 12, -5, 8, 2, -5, -1, 4, -10, -12, 1, 19, -9, 19, -6, 18, -12, -9, -14, -2, 4, 0, -7, -11, 5, -2, -7, -14, 18, 10, 18, 9, -9, 16, 1, -17, -6, 1, -2, -1, 12, 3, -11, 10, -8, -5, 4, 3, -12, 7, -4, 15, 16, 18, 19, 6, 16, -16, -8, 6, 8, 4, -15, 6, -10, 0, -8, -20, -14, 6, 4, 4, -18, 9, 10, -7, 20, -5, -1, -20, 3, 18, 17, -15, 11, 4, -15, -11, -7, -9, -5, -5, -20, 16, 3, 13, -20, -13, 14, -5, -6, 18, -12, 9, -17, 8, -11, 0, -11, -9, 5, -3, -4, -2, 10, -15, 17, -9, -19, 10, -1, -18, -11, -5, 17, -15, -4, -5, 11, -11, -7, -7, 11, 5, -15, -2, -7, -4, 10, 3, -10, -3, 13, -5, 7, 7, -6, 8, -2, -3, -19, 6, 5, 0, 2, -17, 6, 3, -5, -12, 2, -1, -7, -4, 13, 16, 16, -3, -10, -14, -18, -16, 13, -17, -14, 3, 14, 5, -16, -19, -6, -13, -6, 16, -20, -20, 2, -20, -16, 14, -16, 0, 19, 3, 2, -11, 3, 4, -16, 16, -7, -10, -16, -4, -8, 6, -14, -4, 4, 1, -4, -6, -14, 
  11, 0, -20, 5, 10, -17, -16, 6, -8, -21, -3, 11, -2, -19, -21, 10, -10, -6, -11, 14, 7, 15, -10, 12, -4, 28, 28, 34, 29, 32, 28, 8, -13, -1, -8, 18, -17, 5, 7, 4, -4, -12, -17, -4, 16, -15, -13, 1, -4, -4, 1, 21, 0, 15, -2, -12, -9, -1, 20, 15, -7, 17, 0, 6, -13, 25, 0, -12, 3, -20, -4, 26, 35, 32, 12, 11, -19, -1, -16, 9, -3, 7, -5, -4, 1, 8, -12, -7, -23, -17, -4, 0, -8, 11, -20, -11, 2, 14, -7, -18, -15, -28, -8, -23, 10, 13, -15, -25, -2, -16, 7, -11, 5, 1, 16, -20, 13, 0, 9, -6, 38, 16, -1, 27, 1, -11, -15, 6, -1, 8, 4, -8, -4, 12, 18, 8, 9, 19, 17, -16, -6, 15, 11, -15, 4, 6, -14, -20, -12, 8, 11, -9, -2, -20, -16, 6, -5, 8, -10, 6, -23, 6, -20, -1, 15, -8, 15, 25, -10, 22, -18, 8, -7, 18, 16, 13, -2, -17, 7, -8, -20, -24, -9, 15, 11, -22, -21, -10, -10, -2, 3, -9, 8, -3, 17, -21, -12, -21, -14, -8, 13, 15, -9, -2, -6, -3, -11, -10, 11, -3, 25, -16, -41, 24, -21, 3, 5, -33, -10, 14, 25, 11, -16, -14, -14, -45, 24, -34, -47, 12, -1, -12, -14, -42, -30, -15, -6, 22, 11, 27, 3, -42, 31, 3, -16, 15, -13, -17, -12, -44, 2, 23, 20, -11, 6, 13, -38, -16, 5, 3, -13, 18, 6, -19, -29, -45, -5, -2, -8, 17, 9, -17, -30, -11, 10, 8, -35, 21, 3, -10, -19, -16, -21, 11, -2, 12, -7, -1, -59, -38, 18, -16, -46, 21, -25, -3, 14, -13, 5, 9, 9, 17, 6, -5, -40, -13, 16, -29, -35, 5, 4, -16, -1, -38, 1, 23, -11, -17, -19, -12, -63, -34, 18, -38, -23, 30, 2, -10, -9, -23, 1, 17, 1, 6, -30, -11, -7, -20, 17, -11, -28, 29, -9, -15, 15, -45, -15, -1, -12, 1, -24, 12, 0, -35, 15, 2, -30, 3, -9, 6, -20, -49, -12, 2, 1, 24, -26, 24, -29, -47, 33, -10, -27, 5, -26, 9, -12, -26, -3, 15, -9, 6, 5, 10, -18, -34, 19, -24, -17, 34, 2, 0, -2, -16, 12, -13, 4, 4, -14, 26, 9, -30, 22, -5, -17, 14, 1, -1, -6, -26, -2, -5, -10, 20, 2, 18, -24, -33, 37, -37, -24, 38, -32, 11, -22, -14, -23, 10, -18, -14, -5, 5, -47, -11, 8, -21, -15, 32, -10, 17, 6, -50, -2, -11, 3, -13, -32, 20, -16, -46, 43, -25, -13, 13, 13, 8, 16, -38, 11, 23, -5, -8, -11, 20, 1, -31, 15, -18, -7, 19, 3, 20, 3, -49, -13, 15, 4, -4, -10, 21, -37, -21, 26, -9, -46, 35, -12, 10, -21, -30, 5, -6, 3, 3, -11, 20, -46, -15, 43, -36, -41, 27, 0, 4, -17, -46, -7, 16, 3, -9, 1, -7, -15, -23, 34, -34, -30, 12, -24, -13, -21, -42, 14, -8, -16, 13, -4, -4, -22, -24, 29, -36, -13, 1, -11, 6, -17, -11, -12, 20, 8, 18, -30, 24, -37, -12, 14, -28, -27, 35, 10, 12, -7, -36, -13, 1, 13, 17, 1, 13, -33, -30, 47, -9, -45, 21, -16, 18, -5, -27, 7, 15, -15, 3, -35, -8, 10, -34, 39, -5, -41, 21, -23, -18, -21, -24, -22, 15, 19, 6, -24, -4, -23, -14, 33, -34, -46, 24, -18, -13, 6, -36, -21, 15, -2, -9, -19, -14, -3, -10, -3, -32, -25, 31, 9, -17, -3, -33, 13, -11, -2, -7, -21, 
  13, 55, 36, 33, 20, -9, -13, 7, -5, 22, -8, 7, -11, -4, 7, -16, 12, 17, -8, -11, 3, 12, 30, 27, -1, 1, -8, 24, -7, -3, 22, 3, 6, -4, 22, 6, 27, 3, 1, -14, -10, -9, 17, 8, 9, 20, -6, 15, 25, 5, 17, 20, 32, 32, -3, 1, -12, 21, 8, 18, 24, 20, -11, -3, 16, -13, -2, 4, 12, 22, 96, -52, 11, -26, -3, -14, -16, -4, 14, -10, 4, 0, 19, 0, 25, -5, 14, 26, 20, 1, 23, -11, 2, 10, -13, 21, 3, 6, 21, -2, 19, 17, -5, -15, -5, -11, -11, 0, -3, 22, 17, 3, 10, 7, 9, 1, 20, 6, 20, -9, 6, 13, 9, 23, -6, 16, 10, 5, 6, -11, 7, 6, 16, -13, 1, 10, 13, -3, 24, -26, -3, 15, -6, -10, 14, 20, -13, -12, -2, -12, 24, 19, -1, 13, -4, -7, 23, 4, 18, 19, -3, -11, -3, 19, -6, 0, 5, 29, 10, -13, 23, -9, 1, 9, 22, 23, 8, 6, -11, -14, 9, -4, 21, 13, -5, -13, -1, -2, 16, -9, -4, -13, -2, 13, 25, -10, 21, -8, 13, -4, 0, -16, 14, -16, 8, 4, -17, 18, -27, 0, -6, -5, 17, -11, 13, 27, 15, 19, 41, 13, -5, 31, -16, 26, 6, 2, -3, 3, 40, 8, 4, 1, 14, 39, 17, 34, -23, 33, 11, -13, -40, 24, 7, 23, 50, -30, 11, -15, 28, 23, 34, 18, -21, 2, 16, 12, 1, 34, 1, -5, 40, -26, 20, 16, 56, 31, 17, -9, 2, 50, 14, 54, 6, 29, 28, -3, 45, 14, 32, 53, 20, 32, 30, 39, 8, 40, 9, 53, 58, 22, -12, -16, 11, 11, 10, 48, 25, 20, 40, 50, -12, 15, -2, 22, 24, 32, 2, -8, 44, 3, 59, 40, 47, 43, 27, 2, -14, 71, 1, 21, 82, 6, -22, -19, 39, -8, 49, 53, 37, 32, 61, 65, -29, 11, -2, 27, 23, 14, 10, -3, 43, 13, 32, 41, 13, 31, 22, 48, 7, 4, -25, 37, -8, 15, -6, -1, 25, 18, 19, 42, 29, 29, 29, 8, -25, 34, -7, 25, 32, 39, -21, 13, 36, -13, 19, 38, 4, 19, 37, 41, 2, 11, -17, 12, 10, 23, -12, -2, 31, 52, 16, 23, 33, 8, -5, 25, 17, 37, 3, 31, -22, 9, -1, 4, 41, 46, 41, 39, 10, 14, 32, 25, -10, 23, -13, 37, 114, 40, -18, -25, 22, -23, 66, 20, 50, 39, 44, 41, -18, 54, -17, 26, 75, 29, -12, -21, 40, 30, 18, 13, 37, 40, 41, 41, -15, 15, -23, 13, -17, 10, -1, -15, 33, 45, 13, 24, 13, 22, 21, 16, 13, 12, -15, 24, -58, 18, 6, -10, 26, 24, 14, 28, 43, 21, 30, 26, -11, 38, -15, 26, 127, 6, -8, -23, 41, -33, 68, 34, 52, 38, 31, 28, 4, 53, -26, 27, 104, 15, -9, -22, 17, -6, -1, 4, 38, 9, 32, 57, -13, 21, 4, 19, 24, 23, -17, 8, 12, 6, 22, 39, 40, 41, -1, -15, 7, 28, -17, 48, 34, 39, 2, -7, 18, -9, 35, 30, 9, 40, 9, 30, -17, 38, 11, 39, 23, 45, -24, 7, 11, 35, 12, 38, 17, 24, -3, 2, 11, 49, -3, 40, 20, 47, -2, -8, 39, 42, 41, 34, 2, 30, 27, 26, 11, 43, -6, 12, -33, 28, 39, -8, 36, 37, 2, 19, 14, 8, -3, 6, 8, 27, -14, 17, -6, 31, 85, 10, 11, 27, 3, 17, -7, 36, 11, 11, 16, -5, 17, 7, -13, -16, 54, -25, 7, 2, -7, -15, -9, 14, 14, -1, 17, 1, -18, 
  19, -6, -17, 11, 4, -16, -20, 12, -13, 7, -1, 2, -15, -19, -20, 5, 12, -12, -15, -8, 0, -10, 0, -11, -16, -17, 4, 11, -11, 15, 17, -2, 19, -1, -17, 14, 5, -10, 9, -11, -16, -2, -4, 20, -13, -6, 8, 12, -16, -19, 8, 4, -19, -12, 13, -7, -17, -10, 20, -13, 12, -4, 10, 1, 9, -4, 12, 11, 13, -13, -13, 17, 2, -6, -12, 5, 2, -3, -13, 18, 5, 5, 4, 18, 12, 9, -11, -1, 13, -12, -5, 9, -3, -19, 10, 6, 16, -10, -6, 2, -9, 12, 7, 18, -10, -9, -6, -5, 17, 2, -8, -9, -14, -19, 6, 9, 19, 20, -15, -1, -11, -12, 7, 19, 20, 17, -12, -10, 5, 15, 10, -3, 18, -10, -18, 15, -1, -10, -14, -1, 7, -20, -12, -11, 12, -6, -8, -5, -18, 17, -10, 4, 20, -5, -12, 17, -16, 5, -4, 19, 9, -17, 11, -18, -12, -15, 10, 10, -3, 10, -3, 9, 12, -8, 16, -8, 12, 18, -3, -10, -4, 2, -17, 5, -12, 8, 13, 9, -1, -14, 10, 17, 8, 0, -11, -9, -8, 16, 19, -17, 16, 7, 4, 7, -2, -2, -8, -9, -8, 5, -1, 4, -16, 16, 10, -10, 20, -6, -2, 10, 7, -8, -10, 14, 12, 6, -7, 0, -18, 0, -4, -18, 10, -18, 7, 20, -18, 2, -1, 1, 13, -6, 0, 4, -5, -5, 17, -14, 12, 14, 6, -11, 3, -7, -9, -6, 18, 6, -12, -7, 7, 19, 15, 1, 12, 15, -9, 12, -10, 15, -14, -1, 17, -3, 4, -1, 20, 10, -4, 11, -4, -16, 2, -14, -4, -9, -8, 1, 5, 14, -1, -11, 20, 2, -12, 7, -19, 14, 11, -7, -7, -4, -18, -1, -5, 13, 9, 2, 4, 3, -11, -20, 5, -5, -12, -19, 15, 12, -11, -13, -1, 9, -20, 0, 5, -19, 16, 2, 16, -5, 11, 7, 13, 1, -15, -13, 14, 7, 18, -13, -18, -6, 1, -7, -12, 2, -14, -14, 13, -14, 2, -9, -9, -5, 9, 6, -2, 4, -3, 1, 17, -16, -7, 1, -4, -9, -17, 17, -4, 4, 11, -5, 12, -18, -9, -9, 5, 6, 20, -20, -7, 6, 1, -15, 13, 1, -20, -11, -8, -8, -9, -11, 17, -7, -6, -12, -15, -3, 1, 8, 3, -16, 1, 4, -4, 11, -11, -20, 3, -19, -15, 10, 7, 15, -9, -17, -14, -9, -20, 9, -12, 16, -2, 11, -13, -6, -5, -4, -17, 11, 3, -8, 8, 2, -2, 14, 13, 8, 5, -2, -4, 20, -12, -9, 13, -9, -2, 17, 18, -20, 9, -8, 2, 9, -1, -13, 20, -5, 5, 19, -18, 11, 2, -1, 10, 1, 4, -4, -5, -10, 4, -11, -18, -20, -2, 9, -11, -10, -18, 7, 17, -11, -11, -19, -1, -5, -15, -16, -17, -14, -20, 3, -7, 20, 20, -1, 7, -3, 5, -1, -2, 2, 14, -3, -4, -4, 5, 18, 9, -12, -9, -8, -5, 10, 9, -16, 7, 11, 6, -9, 15, 12, -4, -16, -9, 13, 8, -9, 17, 13, -4, 12, 4, -1, 18, 17, -1, -4, 19, 3, 17, 12, 20, -10, -16, -4, 2, -4, -19, 8, 10, 16, 20, -7, 12, 19, -3, -4, 1, -11, 16, 18, 0, -2, -16, -10, 2, -1, 8, 4, 9, -16, 1, -3, 17, 5, 2, 3, -17, -9, -5, 2, 12, -14, -10, -9, -19, -7, 9, -4, 19, 16, -10, -14, -17, 11, -1, -1, -11, 4, 4, -14, 8, 2, -1, -8, 0, -4, -11, 3, -16, 2, 13, 15, 11, -13, -3, 13, 19, -6, 13, -3, 20, 
  -9, -14, -17, -5, -25, -10, 12, 4, 12, 9, 21, 23, 22, -11, 14, 19, 14, 14, 6, 22, -3, -17, 1, -5, 6, -10, -7, -7, 10, 3, 0, 14, -20, -19, -13, 15, -9, -15, -20, -13, -5, -24, 6, -4, -2, -20, 0, -2, -5, 12, 3, 0, -6, -1, -20, -16, -8, -7, -25, 1, -12, 16, -7, 11, 4, 12, 9, 11, 15, -17, 16, 8, -14, -19, 23, 21, -1, 25, -9, -3, 20, 11, 17, 3, -6, 2, 26, 17, -14, 22, -6, 14, 10, 1, 20, 15, 17, 13, -12, 13, 15, -14, 20, 5, 25, -13, -13, 4, 24, 16, 3, -1, 14, -13, 26, -14, -6, 22, 12, 20, 15, -12, 22, 26, 15, 3, 18, 22, 20, 0, 18, -1, 8, -13, 14, 6, -1, -11, 14, -11, 2, 3, -5, 15, -7, -13, 2, 20, -3, 4, 26, 11, 7, 15, -1, 4, 13, 6, -12, -4, 26, 2, -2, -9, 0, 14, 9, 2, 8, -2, -9, 1, 8, -5, 9, 4, 17, 11, 13, 5, 19, 18, -2, -8, 8, -8, 10, 1, -14, -1, 4, 17, -7, 7, 14, 16, 8, -5, 5, -11, 24, -11, 22, 21, 17, -12, -1, -7, 7, 13, 13, -11, -19, -13, -10, 17, 2, 12, 3, 20, 13, -20, 9, -19, -5, -7, 10, 11, -7, -17, -14, -3, -9, -15, -8, 18, -7, -9, -13, 6, -2, 18, -5, 2, -22, 6, 7, -18, 12, 2, -10, -8, -18, -3, -12, -21, 11, -5, -12, 15, -7, -4, -7, -9, -17, -22, -7, -11, 6, 11, -5, -26, -16, 7, -14, 1, -2, 9, 3, 6, 3, -14, 9, -26, -2, 0, 8, -6, 10, -11, 7, 16, -19, -5, -19, 0, 4, 11, -3, 2, 0, -2, 15, -13, 5, -7, -4, 2, -18, -16, -6, 11, -25, -26, -21, -3, 10, -6, -6, -4, 5, 12, 18, 20, -23, -8, 2, 4, -26, 13, -9, -10, 10, 10, 17, -12, -19, 1, 10, 3, 13, -10, -21, -2, -3, 6, 7, -14, 8, -4, 9, 10, 10, 10, 15, 8, 0, 10, -10, 9, 5, -7, -16, 13, 6, -21, 3, -11, -7, -18, 13, 13, -13, 7, 7, -5, -25, -7, 13, -23, 17, -2, 5, -24, -5, 12, -14, 8, 7, -13, -3, 14, 12, -23, -24, -4, 4, -21, -8, 14, -14, 9, -14, -20, -25, 5, -24, 0, -16, -22, -25, -21, 18, -10, 3, 9, 14, -4, -2, -18, -8, 11, -1, 12, 7, -12, -16, -18, 9, -17, 9, -8, -9, -13, -18, 18, -9, 8, -13, -19, -10, 0, -4, 3, -8, 5, -3, 3, 16, 3, -6, 15, -21, -10, 9, -2, 4, 7, -14, 4, -7, 6, 5, 12, -4, -12, -17, 20, -19, 11, -10, -3, 1, -13, -19, -11, -6, -23, 12, -1, -13, -23, -11, -12, -5, -17, -14, 2, -17, -8, 14, -26, -6, 2, -8, -1, -19, 13, 0, 15, 13, 9, 7, 4, -2, -21, -8, -15, -18, -23, -15, 7, -2, -8, -10, 19, -11, 2, -17, 0, 11, 5, 14, 1, 1, -1, -17, -8, -11, 9, 3, 1, -10, 3, -17, -13, -11, -6, -11, 9, 2, -10, 10, 9, -19, 7, -7, -13, -25, 5, 9, -2, 7, -21, 14, -3, 8, 8, 20, -9, -5, 9, 15, 1, 10, -14, -5, 8, -7, -6, -2, -18, -8, -2, 10, -13, 15, -17, -12, 0, -22, 3, -15, 11, 3, 2, 9, 1, 13, -15, -18, -12, 12, -9, -13, -20, 12, 7, 10, -9, 13, -2, -22, -8, 13, 13, -4, -21, -21, -26, -12, -9, -21, -14, -12, 8, -9, 13, -24, 10, -12, 14, 19, 
  -2, 14, 24, 3, -17, 14, 15, 19, -10, -11, -13, 0, -2, 11, -2, 8, -5, -12, 20, 11, 3, -11, -2, -11, -4, 6, 9, -13, -10, -18, 4, 10, 17, -7, 18, 20, -14, 13, 11, 4, -14, 2, -3, 12, -9, 17, 16, 4, -15, -2, -8, -24, -32, -13, 11, -22, 5, 13, 17, -19, -4, 5, 11, -21, -4, -23, -15, -8, 10, -15, 0, -3, 4, -4, -16, -6, -3, 20, -12, 3, 5, -16, -6, 9, -5, 4, -9, -15, -12, 1, 15, -10, 13, -7, 12, -9, -13, -21, 13, 3, 5, -7, 12, 10, -3, 22, 8, 7, 0, -9, 4, 14, -5, -4, 20, 5, -5, 4, -23, -18, -6, -10, -24, -13, -13, -16, -14, 3, 9, -3, -1, 14, -20, 0, 18, 9, -3, -14, -1, 15, 2, -5, -10, 15, 5, -11, -14, -12, 3, -19, 10, 17, -9, 21, 2, 10, -14, 24, 6, -12, -7, 16, -4, -14, 12, 7, -21, -12, -14, -2, 13, 19, -16, 2, -16, 14, -1, 13, -11, -6, -6, 4, 17, 10, 12, -6, -13, -5, 7, -17, -16, -20, 5, -9, -9, -15, -20, 16, -2, -8, 13, 0, -21, -11, 13, -18, -22, 0, -6, 7, -25, 9, 24, -20, 8, -14, 28, 40, 34, -4, -14, -6, -6, -19, 17, 13, -23, 15, 15, -7, 27, 8, -1, 10, 26, -13, 5, 15, -10, -24, -5, 41, -22, 16, 42, -23, 6, 2, 10, 35, 17, 5, -2, 5, -4, -4, 14, 26, -27, 6, 34, -8, 31, 15, 31, 20, 7, 14, -9, -17, 18, -25, 30, 19, -8, 17, 41, -12, -2, -18, 25, 12, 16, -12, -12, -18, -9, -18, 14, 11, -15, -1, 49, -32, 17, 4, 8, 23, 31, 15, -21, -3, -11, -20, 4, 9, -32, 26, 32, -25, 1, 5, 27, 44, 25, -20, 15, -2, 0, -9, 17, 39, -10, 22, 52, -13, 32, -17, 12, 34, 12, 2, -19, 10, 3, -11, 25, 36, -28, 24, 18, -14, -1, -21, -12, 34, 23, 6, -11, -12, 13, 6, 9, 25, -2, 11, 44, -22, 6, -16, 18, 11, 21, 14, -20, -4, 29, 5, 35, 26, -13, 9, 19, -3, 8, 19, 10, 28, -6, 6, -2, -16, -6, -28, 17, 50, -35, 4, 12, -27, 8, 7, 6, 32, 14, -7, -16, 12, -7, 11, -5, 25, -4, 19, 20, -20, 18, -17, 12, 30, -1, -23, -6, 0, 27, -29, 22, 25, -3, 16, 46, -22, 12, -18, 19, 31, 6, -9, 5, -3, 8, -4, 21, 28, -24, -1, 40, -28, 32, -1, 12, 29, 32, -4, -2, -11, -2, -20, 4, 20, -11, 20, 16, 0, -5, 2, 18, 10, 17, -20, -9, 9, 1, -19, 1, 16, -17, 13, 36, -2, 4, 11, 13, 27, 17, -18, -16, -9, 18, 1, 25, 11, -16, 4, 47, -20, 3, 3, -1, 19, 10, -16, -16, -24, -5, -10, 9, 39, -6, 20, 36, 2, 10, 8, 24, 39, 13, -1, 3, -2, 15, -23, 25, 51, -20, 12, 52, -36, -7, -21, 5, 14, 5, -25, 20, 4, 12, -4, 44, 19, 4, 34, 50, -18, 18, 18, 18, 20, 27, 8, 6, -25, 9, -5, 14, 18, -21, 17, 34, -37, 3, -18, 6, 18, 10, 13, 1, -17, 17, 2, 45, 49, -32, 10, 13, -28, 12, 15, 10, 35, 19, 9, 6, -5, -7, -15, -7, 43, -35, 21, 20, -37, 15, 3, 28, 27, -5, -6, -10, -19, 20, -11, 29, 45, -34, 26, 18, -27, 16, 0, 26, 27, 19, -8, -18, -23, 9, -1, 4, 1, -9, 19, 36, -22, 14, -15, 30, 48, 2, 25, 18, 28, -3, 
  -11, -39, 21, 8, 18, 8, 0, -5, -4, 6, -13, -30, -28, -2, 14, 6, -12, 3, -14, -11, -21, 13, -7, -10, -14, -16, -2, -17, -23, 15, 7, 10, -1, 8, 5, -11, 2, -10, 24, -17, -16, 5, 13, -4, 31, 17, 26, 6, -13, -27, 9, 5, -15, 7, -20, 11, -20, -10, -13, 16, 15, -24, 8, -11, -20, -23, -27, 0, -28, -24, -41, 45, 17, -12, -14, -7, -16, 8, -8, 16, 11, 0, -7, -18, -4, 4, 25, 25, -9, -4, 12, 1, -12, 22, 7, -10, -16, -3, 15, -20, -11, 12, -9, 4, 11, 17, 19, 13, -11, 7, -4, 1, 4, 5, 22, -16, 1, 2, 11, 12, -11, -18, -3, -18, -17, 5, -15, 13, -8, -17, -19, -5, 16, -21, 13, -11, 2, -8, -25, -51, 24, -8, 10, 12, 0, 5, 8, 5, -20, -9, -9, -29, -18, -18, 18, 21, 8, -9, -3, 12, -1, 2, 1, -22, -9, -15, -43, -23, -4, -12, 6, -9, 10, 7, -8, 13, -17, -4, -13, 12, -7, 3, 9, 4, 8, 9, -7, 15, -2, 33, 4, -8, 17, 13, -8, -14, 6, -13, -13, -13, -7, -23, 9, -12, -4, 0, -21, 15, 30, -29, -25, -7, -21, -10, -3, 19, 4, -38, 6, 10, 18, -21, 19, -10, 17, -8, 0, -28, -14, 0, 34, 5, 15, -24, 3, 16, 11, 3, -6, 37, 41, -3, -12, -30, -56, -1, 11, 38, 28, -47, -6, 24, 11, 27, -47, 38, -1, -37, 3, -36, -30, 19, 5, -4, -7, -18, 21, 38, -18, 14, -37, 19, -15, -34, -22, -28, -15, 3, -16, -6, -5, -33, -25, -5, -19, 18, -5, 5, -30, -23, -6, -9, -38, -5, -2, -14, -12, -30, 2, -12, -4, 12, -13, 28, -36, -34, -9, 6, -42, 14, -15, 23, 9, -44, 15, 9, -4, -4, -12, -6, -70, -4, -12, -2, -18, 0, 11, -5, -14, -23, -21, -10, -14, 2, -11, 24, -20, -20, -27, -26, -36, 12, 23, -4, 22, -22, 23, 18, -17, 35, -18, 12, 16, -17, -20, -3, -33, -7, -14, -6, 18, -17, 17, 11, 0, -2, -16, 8, -27, -35, -19, -37, -39, 8, 16, 23, -7, -2, 7, -4, -19, 12, -45, 2, -6, -6, -14, 1, -7, -27, 14, 29, 8, -26, 33, 19, -32, 5, -31, 16, 10, -23, -3, -34, -38, 13, 11, 1, 0, -12, 19, 30, -12, -5, -37, 4, -67, -6, -2, -8, -24, 11, -3, -11, 25, -16, -13, 4, 11, 7, -29, 15, -41, -39, -14, -26, -36, 3, 31, 27, 3, -29, 12, -19, 10, 26, -10, -11, 40, -39, -5, -17, -13, 3, 14, 4, 17, -7, 47, 7, -22, 9, -22, 10, 51, -18, -45, 2, -1, -19, 30, -4, 2, -17, 10, 30, -32, -21, -8, 27, -68, -14, -8, -22, -49, 26, -27, 17, -7, -37, -14, 3, -3, -4, -3, -5, -106, -28, -32, -33, -47, 18, 32, 10, 21, -37, 9, -19, -14, 15, -8, 13, 26, -35, -26, -7, -25, -3, 6, 21, 36, -38, 22, 14, -2, 3, -51, 18, -44, -33, -32, -10, -6, 17, 26, 34, 15, -29, 10, -10, -24, 0, -33, -8, 1, -16, 3, 1, -8, 1, 33, 1, 9, -5, 26, 39, -22, 7, -19, -9, -11, -31, -19, -17, -4, -3, 19, 24, 28, -25, 30, 20, -31, 22, -22, 16, 16, -45, -25, -25, -2, 16, 40, 26, -2, 0, -2, 25, 5, 23, -41, -2, -13, -15, -30, -5, -26, 12, 39, 41, 30, -10, 34, 0, -20, 31, -46, 16, 50, 31, -23, -19, -21, -7, 51, 24, 25, -23, 28, 17, -7, 7, -49, 
  12, -2, -1, -20, -25, 7, -2, -1, 23, 4, 15, 13, 5, 9, -2, -11, -10, 14, 20, -5, -12, 6, 26, 15, 14, 23, 15, -3, -10, 22, -13, 2, 26, 16, 0, 22, 20, 19, 19, -3, -3, 2, -10, -1, 22, -10, -10, -10, -9, -1, -14, 3, 4, 3, 16, 3, 20, 25, -10, 11, -14, 14, -7, 1, -11, 12, 5, 13, -10, -21, 11, -15, 5, -11, 20, 7, 13, 20, 9, 22, 9, -14, -12, -5, -10, 2, 12, 9, -14, 17, 24, -2, 12, -11, 12, -3, -7, 15, -6, 13, 17, -8, 7, 5, 5, 10, 20, 18, 6, 8, -11, -4, -8, 23, 22, 3, -5, 0, 20, -9, 22, 13, -12, 12, -6, -13, 18, 7, -8, 8, -11, -3, 3, 20, -9, -2, 8, 5, 4, -4, 13, 4, -1, -11, -9, 26, 23, -11, 15, -12, -4, -11, -11, -13, 10, -8, 15, 4, 19, -2, 24, -12, 15, -6, -3, 5, -13, 19, 16, -5, 24, -12, 20, 13, 12, -1, -9, -2, 24, -2, 20, -13, 20, 8, 12, 17, -2, -8, -4, 14, 21, 23, -2, 26, -4, 0, 8, 19, -9, 3, 13, -11, 2, 24, -10, -10, 8, -14, -10, 14, 19, -4, -26, -12, -21, -15, -25, 3, -3, 4, 12, -5, 1, -24, 8, -26, -24, 11, 12, 12, 0, 6, 4, -9, -18, 12, -5, 5, -1, -4, -14, -26, -23, -20, -14, -24, -17, -11, -7, -22, 12, 9, -12, -12, 2, -26, 5, 14, 2, -2, -7, -10, -9, -26, -4, -14, 1, -26, 2, -2, -15, 12, -16, -26, 24, -5, -7, -7, -16, 12, 6, -2, -1, -26, 3, -16, 9, -13, 1, -11, -14, 6, -19, -6, -24, -6, -19, -6, -19, -25, -13, 4, -6, -12, -8, -9, -7, 2, -7, -15, -5, 14, -22, 5, 13, -15, 13, -6, -16, -12, 2, -6, 13, -21, 3, 9, -20, -26, -23, -24, -8, 1, -21, -15, 8, -12, -17, -18, 13, -21, 13, -2, 6, -5, -12, -6, 2, -22, -16, -5, -8, 6, 1, -1, 15, 7, -18, -3, -20, -9, -15, 5, -4, -23, -21, 4, -24, -25, -12, -10, 13, 14, -27, -20, 2, -12, 11, -25, -21, 8, -1, 3, -11, -13, 0, -19, -1, -14, 9, 9, 10, -3, 0, -7, 9, -14, 4, -11, 11, -7, -14, 4, 9, 13, 5, -23, 3, 11, -3, -2, -15, 8, 2, -3, 11, -25, -18, -18, 15, -16, -14, -9, -15, -16, 10, 14, -14, 7, -19, 0, -4, -6, -9, -24, 3, 13, 12, 22, -4, -27, -12, -26, -16, -16, 2, 9, -2, -11, -20, -3, 2, -16, -25, 27, -22, -18, -10, -11, -24, -17, -15, -15, -16, -11, -2, -14, 9, -17, -11, 9, -20, -22, 6, -13, -2, 4, -20, -13, -2, -20, 3, -14, 14, -16, -14, -4, 13, -19, -1, 3, -22, -4, -6, 11, 0, -4, 1, -22, -7, -5, 10, -17, -23, 9, -3, 14, -22, 13, -5, 9, -6, -21, 27, 5, 25, -15, -23, 7, -11, 8, -20, -1, 2, -15, -23, -27, 8, 8, -20, -22, 13, 10, -21, -24, -2, 8, -12, -5, -26, -15, -17, -13, -15, -9, -22, 0, 17, 12, -14, -21, 12, -7, -21, -16, -6, -11, 11, -3, -12, -6, -23, 6, -14, -14, 8, -22, 12, -14, -20, 6, 8, -25, -24, 3, -15, -2, 5, 0, -14, -24, 10, -24, -9, 5, 8, -26, -25, -9, -6, 4, -8, -19, 8, -18, 23, -16, -24, 2, -26, -23, 11, 5, -4, 5, -2, 23, 4, 7, 4, -4, 5, -7, 7, -14, 9, 3, 8, -26, 8, -13, 9, 17, -5, 
  2, -8, 25, 12, -17, -29, -29, -4, 9, -13, -2, -14, -14, 6, 9, -21, 12, -15, -6, -14, 2, -7, -11, 15, 5, -23, -14, -26, -26, -29, 3, 5, -5, 8, -10, -9, 6, 3, 13, 4, -6, -4, -2, 6, 15, 6, 11, 19, 17, -2, 12, 15, 21, 16, 9, 15, -3, 7, -13, 4, -19, -8, -21, -8, 2, 6, -1, -15, -23, -5, 2, 20, 9, -15, 8, -7, 5, 5, 11, 6, 2, 14, 6, -17, -13, 4, 5, -6, -7, 18, 19, -10, 3, 9, 6, -11, 5, -25, 16, -9, -14, 19, 14, -5, -13, 24, -15, 13, -5, 0, 12, 13, -4, 7, 4, 4, -15, -18, -11, -21, -25, 5, -6, -10, -16, 13, -4, -6, -18, -22, 6, 0, -17, -15, -23, 11, -26, -21, 6, -8, 4, 2, 7, 10, -4, -13, -4, -11, -4, -7, -15, 12, -3, 5, -11, 11, -4, -17, -15, -2, -8, 12, 10, -28, -10, -12, -26, -32, -21, 11, -13, 9, -3, 10, -8, -11, 3, 11, -8, 5, 18, -19, -4, -15, 17, -1, -11, 11, -10, 16, -2, 4, 13, 6, -19, -11, 17, -7, -21, 6, -17, -11, 0, 6, -12, -4, 3, -15, -2, 16, -4, 10, 18, -14, 26, 3, 6, -12, 20, 18, 3, 27, -10, -13, 1, 26, 5, -6, 22, -7, 14, 22, 25, 19, 10, 8, 18, -8, -21, 8, 31, -15, -26, 11, 14, -20, 30, 7, 7, -14, 31, -1, -16, 8, 1, 28, 22, 2, -5, 11, -7, -3, 9, 29, 10, -3, 18, 19, -15, 16, 5, 2, 2, -8, -25, -14, 22, 0, 7, 9, 2, 7, 5, -9, -13, 5, -27, 15, 19, -5, -1, -2, 6, -1, 30, -5, 27, 23, 33, 7, -21, -4, -15, -10, -13, -10, -20, -16, 9, 11, 26, 18, 10, 10, 11, 26, -8, 22, -13, 17, 0, 14, -36, 11, -8, -21, 8, 25, 5, -1, 27, 0, 15, -1, 0, 7, 20, 12, 0, 22, 2, -11, 30, 11, 9, 13, 7, 2, -6, 24, -20, 8, 31, 10, -15, -10, 0, -18, 4, 34, 16, 6, 31, 0, 13, 14, -23, 1, -12, 20, -33, 19, -11, 0, 29, 22, 10, 23, -3, 25, 12, 32, -4, 6, 34, 8, -11, -6, 14, -24, 14, 12, -1, 14, 35, 29, 3, -4, -27, 19, 21, 14, -14, -15, -8, -4, 31, -2, 0, 12, -1, 4, 2, 23, -15, -5, -24, 18, 0, 4, 10, 4, 19, 1, 27, 0, 26, 17, 6, -8, -4, 27, -2, -13, -19, 7, 14, 3, 0, 0, 13, 21, 2, 16, -13, 5, 1, 0, 3, 8, -36, -13, 27, -12, 15, 34, 23, -10, 11, 32, -13, 9, 4, 12, 34, 3, -10, -12, 14, -30, 4, 11, 9, 2, 36, 1, -17, -11, -21, 1, -18, 1, -12, 4, 9, -6, -1, 28, 12, 15, 12, 26, 15, 19, -16, 7, -46, 18, -29, 23, 23, 2, 1, 6, 30, 28, 10, 9, 3, 23, -24, 18, 22, -5, -27, 4, 27, -26, 25, 2, 29, -1, 23, 0, 13, -9, 5, 27, 11, 19, -32, -14, -9, -6, 36, 29, -2, -13, 0, 16, -11, 6, -8, 25, -17, 15, -1, -10, 1, -14, 40, 31, 10, 3, 2, 12, -22, 8, -7, 22, -12, 5, -24, 11, 8, 8, 18, -6, 17, 1, 8, 27, -13, 12, -19, -11, 31, 13, -9, 8, 9, 6, 36, 6, 10, 26, 3, 12, 9, 7, 10, 30, 27, -10, -10, -14, 5, -7, 36, 9, 3, 9, 23, 10, -25, 5, -27, 6, 35, -2, -8, 0, 12, -4, 34, 20, 13, 20, 19, 39, 10, 25, -11, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 16,623 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0047539812512695789, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,16 } };
const TfArray<1, float> quant7_scale = { 1, { 0.11840656399726868, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,8 } };
const TfArray<1, float> quant8_scale = { 1, { 0.086616300046443939, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,4 } };
const TfArray<1, float> quant9_scale = { 1, { 0.10016168653964996, } };
const TfArray<1, int> quant9_zero = { 1, { -23 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,4 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,6,5 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,4,3 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,2,1 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 623, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 9968, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 624, (TfLiteIntArray*)&tensor_dimension7, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_8_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 4; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 4; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_8_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  10, 
};
TfLiteStatus tflite_learn_8_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_8_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_8_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
