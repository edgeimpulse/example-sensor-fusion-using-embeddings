/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 26.10.2023 18:23:45

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1776;
#else
constexpr int kTensorArenaSize = 752;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[4];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,415 } };
const TfArray<1, float> quant0_scale = { 1, { 0.25717836618423462, } };
const TfArray<1, int> quant0_zero = { 1, { -104 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 39, 113, -13, -65, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const TfArray<1, float> quant1_scale = { 1, { 0.00046504120109602809, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(16) int8_t tensor_data2[4*8] = { 
  61, 60, 105, -28, 8, -91, -105, -27, 
  77, -12, -89, -127, -122, -113, -3, 49, 
  -89, 96, -66, -83, 84, -100, 98, 60, 
  10, -19, -5, 42, 14, -35, 83, -47, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 4,8 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0063087958842515945, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[8] = { 44, -37, -44, 0, 48, 67, -52, 41, };
const TfArray<1, int> tensor_dimension3 = { 1, { 8 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00061489286599680781, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[8*16] = { 
  34, 47, 33, -71, 90, 75, 71, 54, -32, 16, 10, -17, -2, 67, 38, 53, 
  -39, 33, 66, -52, -4, 33, 55, 74, 0, -35, -87, 53, -15, 55, 37, 39, 
  -17, -58, 26, -49, -38, -41, 6, 20, 9, 20, -31, -38, 4, 42, 43, -21, 
  50, -86, -51, 38, 44, -45, -20, 66, 66, 59, -31, 14, -86, -41, 45, -55, 
  -31, -73, -48, 51, -47, -59, -31, 95, -82, -25, -67, -9, 25, 79, 31, -10, 
  -60, 10, 58, -1, 57, -15, 73, -24, -15, -84, -80, 55, -41, -37, 85, -29, 
  63, 45, -2, 6, 27, 60, 50, -23, -74, -20, -10, 41, 21, 13, 16, -59, 
  -8, 53, 72, 51, 1, -2, -94, -35, -68, 8, 127, -40, 82, -36, 37, 60, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 8,16 } };
const TfArray<1, float> quant4_scale = { 1, { 0.005667440127581358, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[16] = { -40, 0, -31, -12, 53, -48, 5, 13, -39, 0, 128, -36, 13, -13, 0, 40, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<1, float> quant5_scale = { 1, { 0.00076423981226980686, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[16*415] = { 
  -12, 0, -49, 14, -34, -1, 22, -39, -5, -9, 4, 18, 13, -10, 5, -25, -4, 14, -7, 12, 1, -44, -22, 25, -9, 34, -42, 22, 23, -20, -50, 6, -26, 21, 13, -36, -37, -24, 13, -37, 23, 31, 26, -35, -31, -37, 9, -16, -40, 11, 4, -10, -3, -49, -24, -46, -4, -16, -23, 28, -40, -17, 40, -36, 15, 1, -21, -2, 11, 24, 27, -20, 12, -4, 13, 1, -40, -42, 19, 36, -20, -41, -4, 24, 29, 19, -11, 13, -17, 10, -34, -16, 11, -26, 16, 17, -32, 16, -36, -25, 2, -6, 7, -44, -28, -8, -12, 27, -16, -42, -34, 27, 10, -14, -13, -29, 27, -8, 21, -13, 37, 4, -6, 11, -45, -17, -20, 33, -32, -26, -25, 25, -42, -24, -19, -35, -7, 6, -27, -7, -13, 13, -24, 40, -18, -31, -25, -23, 23, -19, 8, 5, -4, 2, -14, -38, 23, 2, -5, -20, 17, 23, 19, -45, -16, 22, -15, -15, -27, -9, -8, 29, -16, -4, 27, 19, 18, -5, 13, -5, -24, -35, -21, 3, 7, -23, -11, -39, 21, 4, -14, 23, -2, -26, 25, 20, 9, 8, 12, -44, 14, -36, -22, 2, -7, -28, 14, -52, -22, -28, 14, -20, -31, 43, -27, 0, 27, 23, 44, 16, 31, 28, 18, -29, 22, 14, 38, 0, -18, 22, 12, 45, -19, -19, -16, 33, -27, -18, 30, -5, 16, -18, 34, -21, 39, -15, 19, 21, -25, -14, -3, -14, 29, -3, -26, 21, 44, -25, 15, 5, 25, -15, 7, 47, 30, 3, 34, 34, 42, 19, -1, 43, -9, -27, 30, 24, -24, 46, -8, -24, 27, -4, 45, -16, 41, -28, -16, 29, 24, -3, -8, 38, 31, 22, -16, 42, 46, 13, 28, -8, -7, -12, 32, 46, -21, 40, -16, 19, 12, 1, -7, 27, 33, 20, -28, 3, -26, 38, -14, 48, 7, 27, 48, 42, 15, 13, 33, 39, 4, 36, 7, 11, -19, -9, 43, 38, -26, -29, 48, -11, 4, -9, -29, 36, 7, -23, -41, 8, -50, 6, 26, -21, 0, -4, 5, -14, 20, 9, 16, 21, -4, 12, -30, 27, 19, 16, 13, 12, 12, -3, 5, -18, -1, -23, -28, 12, 47, 40, 18, 26, 28, 19, -4, -31, 33, 22, -25, 40, -12, -23, 4, 21, 24, -21, 37, 6, -2, -2, -9, -30, 24, 42, -16, 41, 24, 17, 36, 41, -21, 3, 8, -10, 9, 22, 40, 
  -38, -7, -40, -33, -2, -11, 29, 38, -36, 39, 17, 14, 9, -34, -14, 5, -14, 11, -25, -1, 30, -28, -6, 28, 3, -7, 21, -31, 8, -20, 20, -21, -39, 2, -6, -9, -3, 3, -17, -4, 34, 1, -38, 28, -37, -31, 37, -3, -6, 34, -16, -37, 19, -21, -11, 23, 12, -19, 25, -26, 3, -30, 24, 20, -6, 1, 36, -19, -23, 23, -37, 29, 27, -36, 3, -7, 12, -14, -27, -31, -10, -8, 30, -37, 31, 21, 13, 37, -25, -18, 23, 25, -8, -7, -25, -12, -32, -18, -39, 0, -5, -32, 17, -33, 31, 18, 21, 6, -27, -3, 7, 9, -39, 31, 3, 35, -36, 21, 4, -3, -18, 17, 37, -30, 24, 8, 34, 34, -34, -23, -27, -23, 17, -40, -26, -7, 11, 17, 19, -3, 39, 30, 12, 33, 7, 10, 27, -22, 26, -24, 10, -24, -15, -19, 6, 18, 1, 7, 28, -15, -32, 37, 33, -18, 13, 24, -24, -1, -33, 34, -25, 37, -15, 6, 36, -37, -39, -6, 14, -22, 1, 20, 27, 36, 36, -15, 33, 36, -39, 10, -18, -38, -30, 34, -3, 24, -8, -6, -34, -2, -23, -31, 26, 17, -32, -32, 32, 3, -15, -22, -34, 33, -13, 8, 33, 16, 27, 11, -36, 11, 21, 8, 29, 28, 19, -30, 40, -29, 21, -30, -9, -34, 13, 38, -20, 24, 7, 25, 3, 39, 28, 0, 22, 6, -26, -23, 12, -7, -38, 2, 28, 0, 2, -26, 25, -23, 11, 12, 28, -13, 19, 19, 23, 2, -15, -1, -4, -27, 9, -33, 12, -19, -13, 24, -38, -33, -9, 36, -38, -20, 13, -28, 14, -2, -10, -17, -39, 37, -32, 29, 31, 23, 3, -21, 5, 2, 5, -32, -15, -18, -36, 38, -20, 19, 7, -4, -20, 28, -9, 14, 12, 37, 38, -13, -12, 3, -28, 27, 18, -38, -14, -35, -33, 35, -2, -39, 37, 32, 22, -17, 23, -3, -3, -3, 37, 34, -21, -34, -17, -33, 23, 25, 9, 10, 21, 25, 32, -15, 34, -16, -26, -7, 33, -5, 14, 11, -25, 20, -30, -32, 38, 12, -9, 8, 6, -11, -37, 34, -13, 32, -10, -9, 14, -20, -26, 34, 11, 32, 21, 6, 5, -12, -19, -28, -18, -36, 5, 19, -1, 39, 33, 19, 26, -2, 32, 29, -29, -25, -25, 12, -11, -31, -20, -15, 33, 31, 13, -7, 10, -30, 26, 36, 12, -19, -8, 
  21, -33, -38, 10, -30, 12, 11, -21, 23, 28, 29, 2, 10, -33, 2, -37, -39, 41, 14, -14, 4, -3, -3, 12, 30, 39, -28, 37, -36, 20, 5, -24, -31, -15, -40, -28, -43, -19, -46, -38, 20, -25, 16, 45, 19, -41, 16, 0, -38, 37, 12, -37, 24, -5, -6, 9, 1, 24, -5, -14, 9, -39, -11, -21, 25, -6, 10, -15, 20, -12, -4, -29, -10, 9, -22, 41, -16, 8, 31, -33, -17, 21, 29, -43, 17, -18, -6, 17, 31, 35, -5, 28, -19, -7, 25, -41, 30, 14, 12, -25, 8, 5, -4, 12, 12, 3, 11, -23, -15, 4, -22, -8, 1, 2, 18, 1, 17, 16, -14, -39, 12, 22, 22, -25, -6, -44, -33, 27, 11, -10, 11, -28, -22, -6, -35, 0, 2, -23, -18, 25, -1, -46, 22, -44, -16, 20, 10, -42, -22, -21, -28, 31, -5, -24, -8, 35, 8, -38, -27, 2, -39, 4, -33, 17, -45, 1, -7, 0, 12, 31, -27, 11, 17, 30, 45, -18, 24, 22, -22, -48, -40, 29, 18, -6, -35, -14, -15, 35, 2, 28, -20, 21, 24, -20, -38, 14, 10, 21, -15, -14, 3, 11, 15, 30, -40, -3, -2, -14, -3, 35, 0, -14, -31, 32, 35, 8, 44, -15, 36, -26, 30, -18, 30, 20, -2, 31, 24, -20, 23, 8, -15, 38, 18, -28, -28, 20, -7, 15, -22, -18, -7, -6, 40, 8, -5, 15, -9, 14, -31, 6, 43, 32, -32, 22, -14, -26, 0, 29, 16, 8, -33, -4, 22, 6, 24, -7, 36, -2, 15, -13, -28, 36, -31, 18, 19, 3, -15, 25, -24, 8, -35, -19, 42, 40, 46, -20, 4, 0, -5, 8, -7, 33, 4, -28, 34, 33, -12, 43, 12, -25, -19, 15, 30, -17, -21, 12, -9, -24, -18, 41, 42, 9, 3, 23, -6, 41, 33, 16, -3, -15, -25, 46, -5, -8, 17, 23, -14, -29, 5, 38, -13, -31, 14, -2, -16, 22, -24, 29, 36, -19, 33, -6, 44, 27, 13, -5, -45, -36, 49, 21, 14, 46, 4, -3, -27, -16, -27, 26, 6, -30, 30, 19, -10, -24, 4, 45, 1, -26, -27, -4, 38, 6, -8, 23, 31, 34, -9, 26, 5, -29, 5, 15, -12, 34, 20, 44, 11, 14, 37, 32, -16, 9, 4, 26, 20, 45, -3, 46, 11, -31, 9, 9, 43, -6, 45, 35, 22, 31, -24, -21, -16, 44, 28, -30, -9, 
  -49, -16, 17, 38, 35, -20, -4, -7, 39, 16, 22, 19, -2, 17, 21, 28, 8, 0, -33, -34, -26, -20, 21, 19, 36, -26, -11, 23, 18, -19, 10, 9, -19, 3, -9, 38, 19, -41, 2, 15, 33, 33, 26, -6, -57, 19, -55, -29, -9, -33, -52, -20, -13, 15, 43, 17, 0, -24, 14, -46, 4, -23, 8, 15, -31, -28, -53, 39, 42, -45, -28, 2, 17, 4, -33, 23, -51, -44, -17, -16, -46, -50, -3, 31, -10, -44, -23, 6, -30, 7, -16, -21, 14, 12, -6, -9, -53, -12, -3, 25, 14, 10, -18, -52, -2, -7, -2, 18, -47, -3, 8, 14, 17, -5, -55, -26, -20, 3, 13, -39, -23, -26, 26, -25, 12, -34, -34, 47, 8, -59, -40, -1, -18, -17, -28, -16, -3, -23, -2, -53, -24, -55, -16, -18, -36, -57, -23, -29, 30, -4, -31, 18, 8, 3, -28, -49, -9, -28, -39, -5, -10, -40, -49, -18, 3, -30, 37, 14, -34, 23, -21, 7, -32, -39, -18, 33, -5, -10, -26, 38, 14, -20, 12, -20, -29, -13, -3, -47, 7, -37, 13, -11, 10, -22, -11, 18, -24, 6, 1, -34, -13, -31, 41, -12, -16, -41, -9, -33, -20, 21, -10, 21, -6, 12, -15, -2, 12, -27, 32, 20, 12, -32, -40, -10, -9, -16, 2, -21, 11, -30, -11, -25, 1, -7, 20, -5, -21, -46, -42, -20, -7, 33, -39, -20, 7, -22, -37, -39, -42, 7, -26, 7, 24, 25, -5, -8, 9, -12, -35, -39, 21, -3, -45, -24, -32, -11, -23, 26, -14, 8, -41, -23, 14, -9, 21, 31, -25, -43, 0, -4, 33, 14, 2, 9, -10, -24, -30, -9, -35, -30, -43, -24, -41, 3, -2, -26, -27, -29, -9, 16, -7, 31, 24, -31, -12, -42, -40, -1, -9, -6, -46, 5, 1, 16, 20, -18, -44, 17, -39, -43, -33, 30, 12, 30, 18, -15, -28, -19, -3, -27, -37, 32, -42, -2, 4, -10, 19, -1, -39, 0, 4, 28, -12, -22, -41, 22, -25, 18, -15, -37, 35, -26, 12, 22, -17, 30, 3, -14, -38, -22, -31, 10, -26, -12, 30, -41, -14, -30, -31, -4, 6, -29, -41, 0, -3, -19, 4, -6, -3, -24, -2, -39, -7, -16, 21, 26, -19, 33, 9, 6, 6, -42, 4, -42, -45, 18, -16, -39, -32, 3, -29, -9, 21, 16, -29, -10, -16, 12, 33, -33, -27, -33, -6, -34, -26, 
  48, 11, -9, 12, 5, -15, 31, 7, -24, -23, -7, -15, -19, 7, 41, -12, -8, 35, 3, -10, 29, 45, -12, 47, 8, -4, -3, -8, -8, 33, 1, 20, 6, 21, 15, -31, -30, 47, -11, -19, 35, -32, -18, 43, 7, 6, 46, -23, -16, 21, 22, 2, -2, -14, -10, 40, 32, -32, 42, 15, 9, -10, 3, 66, -21, -14, 9, -23, -21, 36, 31, 45, -8, -8, -9, -18, 1, 51, -15, 16, 20, -11, 36, 31, 33, -21, 1, 54, 0, -12, 33, 8, 51, 28, -21, -4, 36, 28, -16, 38, 33, 16, 41, 50, -18, 13, 10, 45, -19, 31, 43, -32, 9, -11, -17, 15, 38, 25, -21, 13, 7, 21, -7, 39, -3, 9, -24, 11, 38, 38, 54, -13, 31, 16, 9, -7, -19, -23, 2, 51, -4, 44, -14, -19, 54, 3, 31, 40, 39, 8, 41, 20, -6, 14, -6, -6, 10, 26, -20, 69, -1, 10, 52, 3, 36, 32, 17, 24, 12, -1, 26, 52, -11, 47, 47, 28, 14, 6, 47, -15, 32, 7, 20, -22, -27, -34, -13, 24, 23, 37, 3, 20, 32, 10, 38, 43, 16, 48, -2, 7, -15, 29, 26, -26, -18, -24, -5, -10, 22, 1, 54, 48, 24, 31, -8, -35, -15, 25, 14, -19, -18, 16, 25, -20, 12, -19, 14, -17, -12, -8, 17, 21, -17, -16, -2, 50, 33, 37, 8, 29, 20, 44, 40, -15, 22, 3, 32, -16, -18, 36, -23, 30, 26, -19, -5, -19, -15, 29, 25, -10, 4, 44, -4, 27, -19, 16, -10, 7, 36, 12, -5, -18, -1, -14, 21, 6, 23, 18, 15, -9, -4, -9, -9, 18, -46, -25, 30, -6, -4, -16, 9, -21, -32, -22, -13, -19, 5, 15, -37, 20, 34, -30, -36, 37, 3, 46, 35, -20, 22, 16, 36, 32, 8, -40, -26, 14, 12, -23, 16, 13, 23, 12, 0, -7, 15, -2, 33, -3, 51, 4, 29, 33, 20, -19, -35, -19, 33, -25, 29, 0, -27, -8, -14, -26, 4, 1, 38, -50, 8, 4, 46, -31, -38, 30, -40, 10, -5, 15, -14, -4, 23, -12, 28, 3, 1, -31, -20, -18, 34, 24, -35, -6, 40, 38, 63, 17, 23, 3, 14, -2, -3, -18, 2, -27, 11, -29, 9, 0, -7, -34, -15, -16, -32, -23, -7, 10, -27, -14, -9, -38, -36, -21, -19, -8, -4, -24, -40, -28, 25, -3, 30, -21, -45, -17, -8, 
  1, 12, 33, -36, -16, 0, -7, 2, -33, 0, -29, 51, 9, 21, -13, -44, 20, 42, 6, 16, -50, 32, -4, -19, -25, -31, -18, -3, 12, 50, 42, 17, -16, -11, 26, -33, -43, -9, -3, 3, 30, 38, -5, 10, 27, 41, 12, -9, 46, 21, 42, -37, -26, 47, -5, 22, -10, -26, -17, 32, 14, 15, 36, 13, 52, 29, 0, 5, 20, 22, -2, 47, -34, 20, -3, 28, 42, -16, 10, 21, 4, 16, 35, 17, -26, 48, -25, 4, -33, 26, 12, 13, 51, 33, -15, -6, -8, -14, 32, 12, -46, -25, -51, 4, -22, -3, -12, 54, 43, -7, 55, -17, 32, 18, 30, -39, -6, -5, -53, 50, -5, -32, -29, 14, -2, 9, 52, 23, 25, 2, 23, 3, -55, 15, -33, 30, -7, -39, 10, -3, 28, 27, 20, -14, 39, 35, 22, 24, 7, 33, -54, -22, 36, -18, 19, 19, 11, 30, -16, -21, -5, 51, 48, -47, -38, -11, -27, 45, -33, 18, 3, 2, 38, -5, -24, 28, 18, -22, 34, -16, -9, 37, -15, 33, -3, 34, -37, 14, -3, -23, 30, 0, -17, 9, -22, -26, 22, 26, 11, 3, 22, -32, -49, 34, 30, 36, -2, 42, 40, -22, 39, -18, 0, 50, 43, -18, 2, 45, 4, -9, -16, 2, 21, 9, 8, 47, 24, 49, -7, 44, 10, 45, 34, -20, 42, 54, 52, -15, 7, -6, 35, 49, 52, 5, -18, 51, -18, 48, 37, 9, 12, 2, -4, 24, 5, -20, 20, -2, 29, -14, 22, 43, -1, 24, 13, 0, 11, 16, -11, 5, -10, 29, -17, 3, 24, -9, -18, 3, 21, -29, 19, 23, 10, -24, 1, -14, -18, 21, -14, 10, 33, 35, 32, 0, 15, 24, 13, 35, 13, -19, 43, 37, -18, -12, -10, 28, 8, 12, -17, 6, -3, 47, 4, 45, 31, 31, 25, -1, -24, -23, 20, 12, 22, 16, -11, -16, 1, 52, -4, -5, 10, 2, -3, -8, 49, 32, -19, -2, 6, 0, 46, 34, -18, 49, -16, 5, 10, 1, -5, 22, -35, -9, 9, -1, 16, 26, 1, 32, 23, 53, 12, -17, 8, 9, -4, -15, 25, 12, 32, -20, -17, 18, 6, 42, -21, -17, 16, 23, -16, -16, 1, 6, 24, 26, -16, -12, 28, 7, -20, 27, 15, -20, 32, 4, -5, 4, 52, 11, -4, -7, 33, 49, -15, -20, 22, 44, 11, 7, 3, 16, 12, 8, 36, 19, -7, 
  27, -8, -3, -20, -36, -17, -19, 0, -18, 6, -12, -9, -7, 43, 12, 18, 23, -22, -34, -23, -17, 26, -23, 31, 9, -19, -37, 43, -19, 35, -7, -13, -38, -17, -16, 35, -28, -31, 42, -37, 0, -28, -33, -18, 25, -39, -14, -19, 27, -3, -9, 26, 13, -43, -7, -35, -7, -6, -9, -75, -13, -15, -71, 43, -26, -48, -3, -20, -27, 33, 6, -2, -25, 34, -4, -74, -19, -21, -40, 42, 18, 14, -21, 37, 20, -30, -10, 30, 4, 4, -8, 16, -22, 33, 22, 26, 23, -2, 0, 40, 33, -20, 18, -33, -27, -22, 8, -20, 28, 12, -40, 4, -32, -24, 37, -15, -15, -13, -33, 8, -18, 20, 9, 36, 13, -23, -26, 56, -27, 7, 36, -12, 6, 22, -32, -35, -7, 22, -14, -38, 21, -35, -57, -107, 10, 17, 44, 16, 29, -17, -21, 27, -22, -4, -30, -59, 37, 43, -12, -2, -8, 1, 6, -13, -19, -1, 19, 3, 26, 12, -32, 30, 39, -30, 34, 29, 41, -13, -7, 11, -26, 7, 30, 10, -15, 30, 6, -34, -6, 25, -21, -23, 28, 20, -12, 5, -18, -5, -13, 18, 37, 28, -19, 1, 10, 39, 0, -29, 10, -56, 8, 0, 31, 23, -16, 24, -39, 28, -33, 32, -38, -20, -19, 12, 36, 28, -31, -13, -27, -28, -16, 7, -30, 12, 26, -18, -3, 21, -18, -33, 25, 34, -14, -10, 15, 25, -30, -16, 28, -2, -19, 0, -28, 35, -13, -5, -33, -20, -36, 29, 14, 34, -28, 11, -18, 34, -12, 38, -8, -24, 2, 27, 31, -38, -4, 5, 8, 29, -75, -17, 21, 19, 30, -8, 7, 37, -11, -17, 22, -30, 20, 6, -38, -26, 18, 0, 4, 2, -38, 5, -15, 37, -10, 38, -4, -19, -32, 5, -38, 13, 34, -13, -4, 2, -20, 4, -18, -33, 2, 26, 33, 30, -40, -36, -2, 37, -26, 30, 43, 38, 31, 31, 31, -15, 7, 0, 13, 25, 27, 30, -26, -5, 11, 41, 4, -16, -13, -48, 32, -1, 34, -20, 1, -29, 12, -22, 1, -29, -33, 26, -14, -40, 26, -29, -3, -12, 33, 3, -16, 27, 24, -21, 6, -34, 18, -25, 25, 33, 23, 14, -3, -21, -30, -12, -25, -32, 0, -6, 4, -25, -35, 1, 23, -44, -18, 11, 38, 37, -10, -10, -6, -35, 16, -40, 19, -21, 33, -23, 8, 0, -39, 16, 10, 2, 10, 
  63, 41, 62, -31, -11, 68, 22, 3, -5, -15, -14, -14, 63, 27, 56, -25, 44, 34, 41, 8, -24, 0, -42, 58, 1, 32, 7, 8, -12, 24, 42, 16, -2, -22, 17, -37, 25, 28, 11, -8, 8, -17, -24, 2, -16, -8, -40, -1, 6, 8, -11, 30, -20, 7, 0, -3, -30, -32, -29, -15, -30, 13, -39, -19, 29, -18, -38, 14, 18, 25, -33, -37, -33, -29, -31, -76, 13, 30, 8, -21, 27, -34, 2, 8, -9, -12, -34, -16, -34, 1, -6, -33, -2, 22, 22, -24, 50, -38, 42, 5, 42, 36, -4, 9, -21, 10, -33, -1, 13, 30, 14, -14, 1, -1, -28, 3, -1, -8, 36, 37, -13, -8, -30, 61, -18, -8, 33, 20, 34, 13, -8, 4, 33, 2, 45, 13, 11, 23, 18, -51, 1, 21, -79, -54, -12, 31, 14, -26, -4, 28, -16, 27, 6, -5, -12, -51, 18, 38, -27, -72, 5, 34, 14, -11, 15, 5, 31, 48, -26, 8, -11, 33, 45, 18, 71, -24, 50, -9, 5, 12, 16, 32, 27, 42, -16, 26, -33, -5, 48, -3, -15, 0, 17, 55, 45, -24, 20, 26, -26, 37, -5, 17, -45, 0, 56, 31, 67, -2, -65, -105, -35, 16, -13, -15, -7, -19, -43, -18, 13, -6, -28, 12, -1, -42, 30, -5, 22, -30, -29, 27, -36, -40, 10, -4, 5, 34, -32, 38, -19, -14, 15, -26, 21, 17, 27, 32, -20, -31, 14, -14, -12, -7, -33, -5, -20, -12, -9, -16, 7, -35, -18, -9, 0, -12, -6, -35, -9, 1, -14, -28, 29, -9, 15, -5, 23, -19, 6, 5, -82, 44, 19, -18, 29, 10, -26, -39, -1, -44, 1, -21, -41, 36, -12, -21, 6, 8, -5, 36, 16, -1, 30, 17, -28, -37, 9, 9, -15, -14, -4, 4, -40, -12, -20, -2, -20, -13, -36, 30, -43, -25, -13, 29, -12, -28, -5, -29, -26, 30, 16, -31, -37, -7, -29, 10, 10, 3, -29, -32, -28, -9, -21, -29, 5, -5, -6, -45, -34, -25, 21, 25, 7, 34, 6, -41, -16, 29, -37, 6, -40, -20, 20, -11, 37, 36, -6, -37, 15, 16, -46, -14, 9, -30, 4, -23, -8, -42, -24, -30, 26, 29, 27, -7, -24, 13, -25, 0, -25, -23, -33, 31, 17, 13, 13, -34, 13, 27, -25, -4, 45, 34, 24, -33, -19, -27, 10, -42, -26, 11, 7, 9, 5, 20, -15, 13, 1, 
  22, 8, -9, -26, -23, -34, -40, 11, -13, -38, -13, 23, -1, -34, -36, 23, -17, -9, -14, 19, 6, 26, -29, 17, -11, 36, 26, 33, 15, 25, 24, 2, -19, -7, -19, 22, -41, 9, 4, 9, -6, -28, -47, -12, 24, -34, -36, -4, -18, -25, -20, 2, -39, 7, -29, -34, -25, -14, 21, 22, -21, 26, -7, 3, -35, 39, -10, -43, -16, -39, -5, 30, 39, 25, 7, 25, -32, 4, -23, 26, 2, 22, 1, -9, 5, 24, -20, 9, -32, -19, -4, 13, -8, 29, -39, -28, -11, -5, -24, -44, -29, -38, -17, -40, 25, 33, -33, -40, 2, -23, 23, -14, 13, 5, 35, -45, 15, -4, -4, -36, 36, -9, -40, 35, -9, -27, -35, 8, -7, 12, 4, -31, -25, 19, 21, 10, 12, 31, 12, -13, 7, -2, -20, -36, 6, 13, -27, -49, -33, 21, 17, -11, 8, -24, -31, 21, 2, 24, -4, 21, -35, 16, -34, -17, 11, -40, -17, 31, -27, 36, -38, 20, -10, 37, 40, 33, 6, -26, 23, -20, -42, -38, -19, 37, 27, -35, -45, -17, -22, -29, -21, -26, 12, -2, 38, -49, -32, -39, -37, -19, 23, 25, -32, -8, -15, -10, -26, -29, 24, 29, 19, -22, -32, 27, -15, 16, 32, 3, 25, 33, 41, 31, -16, -29, -29, -24, 13, -25, -25, 4, 10, -21, -8, -16, -24, -25, -15, 46, 48, 48, 11, -14, 30, 48, 47, 5, 2, -25, -3, -10, 38, 47, 45, -19, 43, 21, -25, 36, -25, 48, 42, 13, 46, -22, -27, -19, 23, -2, -7, 38, 46, -27, 0, 37, -4, 39, 1, 7, 45, -2, -30, 17, -1, 33, -2, 34, -2, 1, -29, -5, -8, -4, -24, 18, -16, 2, 49, 40, 44, 28, 6, 40, 28, -14, -24, 38, -12, -11, 3, -16, 43, -28, 22, 0, 36, 43, -28, -27, -9, -29, -25, 5, -9, -27, 36, 28, 44, -10, 7, 32, 37, 38, 6, 10, -25, -28, 45, 31, -12, 25, 14, 31, 3, -25, 44, -18, -25, 1, -28, -24, -33, 18, 16, 5, -15, 48, 7, -17, 13, 18, -20, -29, 2, 1, 11, 48, -15, 42, 4, -21, 27, 25, 14, -12, -18, 22, -5, 19, 22, 30, -12, 9, 46, 15, -6, -8, -10, -3, 35, 43, 25, 4, 9, 35, 45, -24, 19, 10, 8, 46, 41, 13, 10, 36, 39, 6, 25, 3, 7, 22, 19, -12, -5, 42, 45, 
  -33, 29, 32, 35, -2, -23, -31, 12, -15, 37, -22, 9, -25, -14, 10, -40, 18, 24, -28, -28, -4, 11, 40, 36, -15, -8, -32, 32, -29, -13, 40, -10, -7, -20, 34, -1, 39, -6, -5, -38, -29, -24, 27, 4, 10, 27, -23, 10, 28, -12, 9, 15, 38, 40, -29, -17, -39, 29, 4, 22, 34, 25, -36, -18, 18, -38, -16, -5, 11, -15, 22, -5, 33, -9, -7, -35, -37, -16, 19, -30, 0, 0, 29, -4, 31, -27, 18, 35, 30, -8, 34, -29, 6, 18, -29, 36, -6, -3, 29, -23, 20, 15, -20, -35, -13, -28, -30, -8, -15, 34, 19, -7, 12, -1, 8, -11, 30, 2, 28, -28, -1, 13, 7, 35, -20, 24, 12, 0, 3, -29, 6, 6, 29, -32, -4, 16, 22, -11, -36, -36, -17, 23, -11, -27, 21, 31, -30, -29, -20, -34, 31, 22, -12, 10, -13, -22, 36, -1, 18, 30, -20, -35, -14, 20, -31, -14, -14, 37, 3, -36, 34, -30, -6, 9, 32, 30, -1, -4, -36, -38, 4, -22, 24, 11, -21, -39, -19, -18, 19, -29, -20, -36, -15, 11, 35, -32, 30, -27, 16, -17, -9, -39, 21, -38, 8, 1, -38, -30, -35, -34, -3, 4, -8, -38, -15, 26, 1, -6, 30, -32, 3, -11, -21, -13, 1, -40, 13, 14, 35, 7, 18, -22, -3, 35, 2, -8, -33, 31, 25, -39, -17, 5, -6, 33, 6, -16, -2, -34, 17, -40, 20, 14, -33, 6, 19, 15, -30, 21, 15, -21, 31, 26, -22, -32, 38, 7, -16, -30, -7, 33, 21, 33, -3, 8, 36, 9, 39, 16, -6, 33, -25, 13, -10, -3, 16, 3, 30, 39, 32, -2, -11, -17, -25, 18, -39, 37, -6, -5, 18, 20, -13, -36, 8, -13, 8, 19, 14, -2, 29, -7, 11, 4, 15, 13, -20, -3, -12, 40, 15, -29, -25, -37, -31, -25, -10, 36, 20, 34, -5, -6, 31, 39, -38, -32, 13, -9, 7, -23, 32, 7, 38, -20, 38, 36, -15, 13, 6, 13, 17, -14, -38, 20, 6, -25, -20, 10, 0, 16, -25, 25, -3, 7, 7, -22, -37, 3, -4, -10, 13, 26, -28, 38, 20, -33, -14, 36, -34, -14, 21, 3, 18, -24, -22, -38, 19, -6, -11, 8, 10, 37, 17, 6, 35, -35, -26, -2, 35, 6, 12, -3, -18, -32, 10, 19, 31, 21, 39, 8, -39, -23, 20, 14, -19, -40, -19, 
  34, 1, -35, 45, 33, -34, -15, 43, -26, 13, 22, 10, -36, -34, -27, 10, 41, -27, -15, 13, 31, -2, 30, -38, -31, -33, 36, 3, -4, 42, 7, -22, 85, 44, 14, 29, 15, 28, 22, 19, -31, -5, -4, 62, 24, 34, 52, 23, 21, 18, 67, -8, -57, 29, 13, 48, -34, -20, 25, 36, 76, 45, 96, 2, 62, 49, 70, 20, 18, 19, -23, 77, 5, -11, -21, 96, 50, 37, 14, 35, 51, 53, 49, 29, 23, 59, -21, 33, 24, -24, -12, 49, 36, 5, 42, 1, 67, 26, 26, 6, -27, 60, 21, 76, -19, -17, -7, 40, 70, 38, 37, -27, 19, 8, 56, 23, 48, 86, -21, 14, -22, -24, 20, 32, 94, 75, -22, -20, 61, 88, 70, -25, 9, 32, -49, 100, -2, -19, -43, 90, 66, 16, 69, 60, 53, 30, 16, 2, -26, 61, -6, 59, 39, -11, -9, 127, -7, 41, 34, 119, 49, -15, 52, -24, -1, 0, 32, 33, -6, 20, 7, 20, 52, 13, 12, -16, 41, 62, 16, -8, -12, 22, -19, 50, -24, 16, 37, 70, 10, -4, 78, 79, 23, 6, -13, 19, 26, 37, 71, -44, 32, 14, 44, 18, -9, -5, -43, -6, 35, 113, 38, 46, 0, 30, 21, -29, 41, -12, -3, 18, 13, -18, -29, 34, 20, 11, 0, 0, -31, 8, 25, -16, 35, -33, 39, 52, -14, -2, -25, 19, 56, -2, 2, 18, 5, 2, 27, -14, 22, 23, 5, -13, 8, -1, -14, 21, 70, 51, 22, 32, 58, 80, 74, 39, 45, 39, -9, 38, -5, 45, -7, 14, 48, 8, 21, 12, 52, 71, 118, -34, 8, -50, -13, -31, -10, -19, -12, 14, 7, 7, -2, -30, 67, 26, -22, 42, -32, 30, 30, -17, -33, -23, -43, -11, 6, 56, 33, 38, 35, 43, -13, -46, 1, -17, -23, -37, 31, 24, -8, -10, -4, 36, -30, 17, 15, -30, 36, 9, 48, 5, 33, 16, 23, 2, -29, -21, 33, 12, 38, -32, -47, -13, -3, -19, -31, -3, 35, -11, 33, -9, 5, -26, -24, -6, 12, 5, 28, 21, 29, 24, 46, -11, -21, 5, -2, -14, -2, 36, 9, 28, 21, 19, 64, -10, 46, 30, 43, 23, 53, -16, -7, 24, 18, -7, 59, 29, -13, -11, -2, 8, 17, 6, 51, 11, 22, 3, -13, 8, 14, 27, 20, -12, 20, 23, 4, 34, -18, -40, 5, -40, -37, 15, 12, 22, -27, 
  -15, -48, -30, -7, -46, -40, 2, -4, 12, 6, 20, 33, 23, -41, 15, 25, 6, 7, -10, 21, -26, -30, 4, -30, 23, -9, -35, -35, 22, 8, 3, 38, -37, -35, -24, 30, -15, -27, -37, -23, 2, -35, 14, -6, -1, -37, 1, 7, -7, 25, 8, 2, -9, 1, -38, -30, -4, -2, -46, -19, -43, 10, -35, 10, -13, 3, -3, 0, 9, -32, 10, 18, -16, -26, 24, 21, -22, 28, -38, -17, 18, 1, 13, -16, -32, -17, 30, 13, -38, 32, -31, 7, -1, -18, 19, 17, 13, 5, -44, 5, 8, -48, 18, -10, 37, -37, -47, -13, 25, 11, -14, -14, 6, -46, 29, -48, -22, 23, 2, 18, 17, -34, 21, 30, 9, -14, 14, 31, 17, -21, 15, -23, -5, -47, 6, -10, -14, -33, 30, -43, 7, 8, -7, 17, -34, -46, -16, 18, -18, -14, 30, 1, 1, 17, -23, -12, 5, -10, -45, -18, 30, -16, -24, -37, -21, 7, -3, -17, 5, -16, -38, -18, -6, -30, -4, -3, 13, 0, 4, -12, 17, 15, -26, -37, 4, -27, -1, -19, -48, -23, -14, 22, -34, -7, 7, 10, -5, -31, -10, -42, 36, -33, 23, 21, 13, -44, -23, -23, 16, 35, 16, -19, -47, -6, -10, 42, 13, 32, 15, 47, 46, -30, 37, -16, 0, -4, 41, 43, -4, -31, -36, 16, -15, -38, -6, 45, -11, -15, -23, 14, -13, 25, -8, -6, -41, 14, 16, -33, 25, 6, -17, -13, -34, -4, -21, -38, 24, -7, -32, 19, -11, -17, -12, -16, -32, -41, -12, -1, 20, 42, -1, -30, -22, 33, -17, 12, 17, 19, 26, 14, 8, -26, 38, -29, 15, 22, 25, 10, 39, -1, 23, 40, -17, 11, -16, 20, 29, 42, 14, 25, 21, 17, 39, -5, 19, 7, 1, 13, -14, -10, 8, 41, -27, -29, -21, 15, 28, 10, -2, 13, 31, 43, 44, 48, -24, -6, 24, 28, -30, 47, 3, 2, 29, 40, 42, -2, -18, 23, 29, 15, 46, -10, -21, 18, 14, 31, 15, -6, 6, -7, 9, 40, 28, 40, 40, 24, 20, 39, 1, 39, 30, 7, -10, 46, 21, -21, 15, 0, 8, -15, 35, 35, -6, 35, 35, 11, -29, 8, 47, -25, 42, 18, 19, -26, -1, 44, -18, 25, 34, -5, 15, 48, 44, -24, -26, 13, 17, -20, -7, 49, -6, 38, -17, -30, -27, 19, -26, 20, -11, -22, -27, -20, 45, 0, 15, 
  -26, 43, -1, 35, 0, 16, 27, 41, -25, -28, -29, 1, -16, 9, -5, -3, -20, -31, 28, 20, 12, -24, 3, -32, -13, 18, 32, -15, 6, -22, 3, 40, 34, -8, 35, 36, -32, 23, 15, 6, -38, -1, -9, 29, -10, 36, 45, 18, -24, 15, -3, -20, -34, -10, 30, -25, 12, 29, 35, -1, -2, 14, 55, -36, -7, -31, -26, -6, 29, -40, -22, 21, 34, 23, -23, 24, -8, 33, -20, 0, 3, -32, -21, 16, -9, 0, -16, -36, -33, -8, 21, -17, 16, -24, 22, -22, -24, -16, 27, 14, 10, -29, 26, 17, -13, 37, 15, 30, -9, -31, 19, 35, -15, -6, 36, 16, 1, 10, -30, -32, 14, 9, -22, -31, -12, -30, -40, 11, 21, 4, 0, 29, -38, 4, 38, 39, -4, -25, 12, 53, 5, 23, 57, 115, 3, -14, -33, -13, 21, -44, 31, 33, -23, 36, 4, 65, -46, 27, 6, -14, -29, 17, -20, -15, 44, 24, -3, -23, -21, 1, 29, 20, -43, -6, -56, 15, -17, 18, -38, -7, -11, -9, 38, 18, 24, -13, -15, 21, 7, -18, 14, 6, -2, -29, -38, -17, -17, 14, 9, -39, 29, 4, -25, -32, 17, -54, -71, -9, -10, 10, -10, -4, -27, -12, -11, -42, 28, 18, 25, -15, -20, -17, -18, -31, 29, -38, -18, 6, -32, 9, 24, 9, -26, -49, 17, -33, 6, 16, -45, -46, 2, 14, -26, 10, 19, -18, -27, -6, -12, -2, -8, 4, -8, 1, -27, -6, -18, -15, -29, -21, -11, 8, 26, 16, 30, -31, -24, 22, -14, -32, 22, -44, 12, -27, 4, 9, 14, 23, 14, -66, 19, -58, -5, -19, -14, -30, -24, -23, -37, -44, 6, -31, 34, -30, -4, 4, -7, -21, 30, 29, -40, -8, -42, -32, -44, -45, -34, 19, 0, -11, -27, 9, 27, 18, 15, -39, 31, -2, -21, -2, -24, 11, 15, 10, 33, 6, 23, -43, -6, -13, -13, 2, -42, 23, -23, -9, -11, 5, -19, 9, -30, 6, -31, -43, -40, 2, 29, 44, -53, -15, -6, 27, 7, -14, 31, -16, 22, -11, -15, -26, 17, -40, 11, 32, -44, -1, 36, 23, 12, -10, 2, -15, -25, 23, -19, 34, 0, -12, -40, 24, -3, -22, -35, -39, 8, 34, -27, -27, -41, -17, -6, 18, -6, -3, 3, -7, -36, 17, -52, 29, -44, -15, 22, 3, -29, -6, 8, -35, 5, -10, -32, -39, -16, 4, 23, 
  22, 20, 19, 4, 28, 48, 23, 7, 12, 33, -6, -43, -23, 27, 43, 12, -1, 22, -10, -16, -43, 32, -15, -2, -21, -30, 22, 14, 3, 48, 8, 23, 10, 26, 13, -7, 17, -8, 36, -29, -29, -1, 8, -19, 36, 19, 25, 2, -16, -37, 38, 16, -27, 29, -12, 27, -39, -29, -27, 11, 41, -30, 16, -42, -17, -28, -32, 15, -41, -24, 5, 10, 22, -31, -21, -23, -16, 32, -3, 21, 33, -4, -7, -41, -2, 15, 14, 45, -22, -14, 23, -9, -33, 39, 18, -30, -1, 31, 44, -34, -18, 48, -22, 5, 7, 21, 27, -1, -17, 20, -7, 5, 10, 19, 44, -31, -10, 7, 19, 43, -17, -37, -4, -8, -35, 15, -3, 8, -4, -27, -22, -2, 38, -24, 37, -21, 14, -4, -35, -57, -22, -19, -3, -20, 22, 25, 31, 7, -30, 4, -4, -37, -30, -20, 31, -14, 30, 3, 16, -15, 24, 32, 13, -15, 12, 21, -14, 26, 24, -8, 14, 13, 42, 35, 23, 8, -7, 15, 1, 23, -13, 34, 31, 25, 16, 21, -8, 15, 10, 50, -39, -43, 53, 51, 14, -28, 10, 10, -23, 15, -9, -39, 15, 4, 14, 33, 3, 64, -23, -47, -2, -20, 0, -28, -17, 12, -16, -37, 22, 28, 6, -31, 37, -27, 29, 23, -2, -39, 13, -15, 12, -26, 1, -7, -13, 35, -8, -20, 20, 32, 14, 36, 11, 7, -32, -33, -10, 28, 35, -17, -17, 12, 31, 6, -21, 32, 25, -31, 34, -9, -13, 0, 14, -8, -2, 15, 33, 26, 2, 20, -14, 33, 8, -29, -37, -32, 12, -33, -89, 44, -10, -24, -37, -11, -25, 35, 13, -4, 30, -2, 28, 12, -34, -21, 1, -30, -36, -17, 2, -20, 13, 15, 11, 41, -39, -32, 11, 35, -32, 21, -7, 41, 20, -19, 32, -29, -15, 6, 13, -23, 9, 39, 24, 23, 41, -21, 38, -12, -25, 19, -27, -14, -35, -6, 7, 35, 5, 4, -12, -19, -30, 27, 2, -35, 12, -1, -3, -11, 50, 24, 16, 1, -37, 11, -3, 35, -28, -21, -40, -33, 22, 3, 13, -12, 13, -12, 17, -4, -2, -32, 3, -32, -39, -1, 19, 15, -42, 39, -3, -17, -33, 2, -40, -12, -2, 25, 15, 41, 28, -38, -27, 24, -25, -12, 14, 20, -15, 10, 18, 19, -21, -3, 27, -34, -32, 28, 2, -4, -14, 20, 9, 18, 13, -13, -7, 
  36, 9, -14, -28, -39, 3, -16, -13, 33, -4, 18, 13, -2, 6, -15, -34, -31, 15, 27, -21, -35, 0, 39, 17, 15, 33, 18, -18, -31, 31, -37, -7, 39, 19, -11, 31, 27, 26, 26, -17, -18, -9, -31, -13, 31, -31, -31, -32, -30, -13, -39, -5, -3, -6, 20, -6, 27, 38, -31, 9, -38, 15, -26, -9, -34, 13, -2, 13, -32, -28, 35, -17, 21, -11, 28, 2, 13, 28, 7, 31, 5, -38, -35, -22, -32, -7, 11, 7, -38, 21, 35, -16, 11, -34, 12, -17, -25, 17, -24, 14, 21, -27, 2, -1, -1, 7, 26, 24, -1, 4, -33, -20, -28, 33, 31, -6, -21, -12, 27, -29, 30, 14, -35, 11, -24, -36, 24, 2, -28, 4, -33, -18, -5, 28, -28, -16, 3, -2, 20, 5, 38, 19, 10, -32, -30, 38, 33, -33, 17, -35, -20, -33, -32, -38, 7, -28, 18, -4, 26, -16, 36, -35, 17, -24, -18, -2, -37, 26, 19, -21, 36, -36, 27, 14, 12, -13, -29, -16, 35, -16, 27, -38, 27, 4, 13, 22, -16, -27, -20, 15, 30, 34, -16, 38, -20, -12, 4, 26, -29, -6, 14, -34, -8, 35, -32, -32, 3, -16, -7, 40, 27, 4, -39, -11, -29, -17, -36, 18, 7, 20, 36, 2, 14, -35, 25, -38, -35, 34, 36, 35, 12, 24, 21, -6, -23, 36, 3, 22, 11, 5, -15, -39, -33, -27, -15, -35, -21, -8, 0, -30, 35, 30, -11, -11, 16, -39, 22, 39, 4, 9, -1, -8, -6, -39, 4, -15, 14, -37, 15, 9, -18, 37, -19, -38, 36, 1, -2, -2, -18, 36, 25, 9, 11, -38, 17, -19, 30, -12, 14, -9, -16, 24, -25, -1, -34, 1, -25, 0, -25, -34, -13, 21, -1, -11, -3, -6, -1, 16, -1, -18, 2, 39, -30, 22, 37, -17, 38, 1, -19, -11, 16, 0, 37, -30, 19, 30, -26, -39, -32, -35, -3, 16, -29, -17, 27, -11, -21, -22, 14, -29, 37, 5, 25, 2, -10, 2, 17, -31, -19, 4, -5, 23, 15, 11, 18, 25, -23, 2, -27, -6, -17, 22, 6, -32, -29, 21, -35, -36, -11, -7, 38, 38, -39, -28, 16, -10, 34, -36, -28, 29, 10, 19, -10, -13, 13, -24, 10, -16, 31, 30, 31, 7, 12, -2, 30, -15, 19, -9, 32, -1, -15, 20, 30, 37, 23, -36, 19, 33, 6, 8, -16, 29, 16, 8, 34, 
  12, 28, 23, 31, -10, -25, -27, 30, 38, -5, 23, -1, 3, 45, 48, -36, 53, -10, 8, -9, 14, 3, -19, 37, 11, -36, -1, -16, 5, -15, 17, 8, 11, 50, 5, -4, 19, 30, 21, 30, -14, -16, -10, 24, 39, 21, 34, 15, 49, 21, 45, 30, 41, 53, 25, 54, -12, 8, -23, 39, -4, 19, 6, -45, 40, 56, 35, -10, -28, 2, 38, 17, 26, -5, 36, 33, 46, 41, 52, 0, 27, 48, 30, -32, -25, 24, -6, -1, -21, 26, 34, -10, 22, 34, 31, -35, 52, 5, 58, -15, -26, 56, 27, 10, -34, 39, -32, 41, 8, 15, 47, 10, 13, 41, 29, 10, -27, -9, -12, -12, -33, 26, 4, 7, 5, 52, 17, -20, 0, -1, 50, 16, -19, 13, -26, 70, -33, -23, 7, 67, -12, 36, 72, 92, 22, 11, 21, -10, 3, 14, -15, 59, -4, 12, -14, 51, 9, -10, -3, -21, 8, 48, 41, -31, 7, 27, -3, -9, -19, 39, -17, 39, 23, 45, -6, -49, 24, 46, 4, 13, 33, -17, 2, -3, 30, -3, -17, 48, -5, 40, 11, 25, 41, 31, -18, -12, 44, 10, -25, 37, -22, -11, 16, 39, -5, 19, 30, -18, -27, 31, 53, 14, 23, -29, 12, -34, -30, -47, 5, 9, -17, 27, -32, -50, -25, 34, 30, -23, 26, -8, -8, 14, 13, 15, -20, -19, -12, -62, -46, -15, 12, -49, -26, 26, 16, -42, 17, -26, -27, -39, 24, -35, -24, -16, 24, 34, 23, -6, 35, 51, -1, 6, -7, 35, -5, -17, 4, 2, -20, 5, 21, -19, -14, -32, -28, -27, 24, 11, -16, 20, -23, -10, -25, -44, -24, -14, -42, 13, 36, -26, 35, -4, 2, 14, 41, -22, 23, 33, 35, -9, -30, -36, -22, -43, -49, -48, -11, -35, 9, 41, 23, 7, -11, 12, -9, 20, -11, 22, -17, 16, 32, 17, -29, 17, -22, -31, -15, 21, -24, -16, 19, -23, 27, -27, 6, -6, 22, 3, 29, 29, -20, -11, 12, -18, -26, 1, -10, -45, 43, 21, -27, -9, 14, 4, 3, -24, -14, -22, -24, 36, -1, -7, 21, -30, 31, 1, -31, -23, -29, 24, -39, 32, -40, 0, 7, 5, -20, 26, -40, 25, 23, 33, 5, -5, 43, 5, 17, -14, 15, -21, -11, -4, -35, 14, 34, 36, 32, -16, -14, 24, 23, 17, 10, -34, -30, 10, 26, -32, -35, 4, -42, -25, 15, 20, -19, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 16,415 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0029716333374381065, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,16 } };
const TfArray<1, float> quant7_scale = { 1, { 0.10849569737911224, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,8 } };
const TfArray<1, float> quant8_scale = { 1, { 0.073713146150112152, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,4 } };
const TfArray<1, float> quant9_scale = { 1, { 0.10486739128828049, } };
const TfArray<1, int> quant9_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,4 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,6,5 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,4,3 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,2,1 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 415, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 6640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 416, (TfLiteIntArray*)&tensor_dimension7, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_8_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 4; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 4; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_8_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  10, 
};
TfLiteStatus tflite_learn_8_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_8_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_8_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
